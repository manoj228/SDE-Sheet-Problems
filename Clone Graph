Example 1:
Input: adjList = [[2,4],[1,3],[2,4],[1,3]]
Output: [[2,4],[1,3],[2,4],[1,3]]
Explanation: There are 4 nodes in the graph.
1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).
3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).

Example 2:
Input: adjList = [[]]
Output: [[]]
Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.

Example 3:
Input: adjList = []
Output: []
Explanation: This an empty graph, it does not have any nodes.

Example 4:
Input: adjList = [[2],[1]]
Output: [[2],[1]]

// Time complexity : O(n)
// space complexity : O(n)
class Solution {
public:
    
    Node *dfs(Node *node, unordered_map<Node*, Node*> &mp)
    {
        if(!node) return NULL;
        
        if(mp.find(node) == mp.end())
        {
            mp[node] = new Node(node -> val, {});
            
            for(auto adj : node -> neighbors)
            mp[node] -> neighbors.push_back(dfs(adj, mp));
        }
            
            
        return mp[node];
    }
    
    Node* cloneGraph(Node* node) {
        unordered_map<Node*, Node*> mp;
        
        return dfs(node, mp);
    }
};
