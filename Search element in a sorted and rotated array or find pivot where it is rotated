Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Example 3:
Input: nums = [1], target = 0
Output: -1

//Time complexity : O(log n)
//Space complexity : O(1)
class Solution {
public:
    int search(vector<int>& a, int target) {
         int l = 0, r = a.size() - 1;
    
    while(l <= r)
    {
        int mid = l +  (r - l) / 2;
        
        if(a[mid] == target)  return mid;
        
        // check target is in left half
        if(a[l] <= a[mid])
        {
            if(target >= a[l] && target <= a[mid])
                r = mid - 1;
                
            else 
                l = mid + 1;
        }
        
        // else we check for right half
        else {
            if(target >= a[mid] && target <= a[r])
                l = mid + 1;
            
            else
                r = mid - 1;
        }
    }
    
    return -1;
    }
};
