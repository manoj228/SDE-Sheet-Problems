Given the head of a singly linked list, reverse the list, and return the reversed list.

 
Example 1:
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]


1) // iterative implementation

Time complexity : O(n)
Space complexity : O(1)
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode *pre = NULL, *nxt ;
        
        while(head)
        {
         
            nxt = head -> next;
            head -> next = pre;
            pre = head;
            head = nxt;
        }
        
        return pre;
    }
};

2) // Recursive implementation
Time complexity : O(n)
Space complexity : O(1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
    
        // base case
        if(head == NULL || head -> next == NULL) return head;
        
        ListNode *nxt = reverseList(head -> next);
        
        head -> next -> next = head;
        
        head -> next = NULL;
        
        return nxt;        
    }
};
