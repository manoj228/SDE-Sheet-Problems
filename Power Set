Given an integer array nums of unique elements, return all possible subsets (the power set).
The solution set must not contain duplicate subsets. Return the solution in any order. 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Example 2:
Input: nums = [0]
Output: [[],[0]]


// power set is useful to create the subsequence by checking ith bit is set or not

// Time complexity : O(pow(2,n) * n)
// Space complexity : O(1)
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        
        int n = nums.size() ;
        vector<vector<int>> res;
        
        // pow(2,n) can be written as (1<<n)
        for(int i=0; i < (1<<n); i++)
        {
            vector<int> temp;
            for(int k = 0; k < n ; k++)
            {
                // if ith bit is set
                // 1 << k means we are putting k zeros at left after 1, 
                if(i & (1 << k))
                    temp.push_back(nums[k]);
            }
            res.push_back(temp);
        }
        
        return res;
    }
};
