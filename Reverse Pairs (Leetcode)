Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where 0 <= i < j < nums.length and nums[i] > 2 * nums[j].

 

Example 1:

Input: nums = [1,3,2,3,1]
Output: 2
Example 2:

Input: nums = [2,4,3,5,1]
Output: 3

1) // Brute Force solution
// we can take two for loops, one for iterating i and another for j , we  can directly check the given condition and update the count , finally return it

// Time complexity : O(n*n)
// space complexity :O(1)

2) // better solution is using merge sort
// Time complexity : O(nlogn) + O(n) + O(n) = O(nlogn)
// space complexity :O(n)
class Solution {
public:
    int merge(vector<int>& nums, int left,int mid, int right)
    {
        int revCnt = 0, j = mid+1;
        
        for(int i=left; i<= mid; i++)
        {
            while(j <= right && nums[i] > 2LL * nums[j]) j++;
            
            // j'th position value * 2 is greater than nums[i]
            // so after j also it will be greater
            // then we are calculating the length upto which position j smaller
            revCnt += (j - (mid+1));
        }
        
        
        vector<int> temp;
        int i = left;
        j = mid+1;
        
        
        // O(n)
        while(i <= mid && j <= right)
        {
            if(nums[i] <= nums[j]) temp.push_back(nums[i++]);
            else temp.push_back(nums[j++]);
        }
        
         while(i <= mid) temp.push_back(nums[i++]);
             
        while(j <= right) temp.push_back(nums[j++]);
        
        // O(n)
        for(int i = left; i<=right; i++)
            nums[i] = temp[i-left];
        
        return revCnt;
    }
    
    // O(nlogn)
    int mergeSort(vector<int>& nums,int left, int right)
    {
        int cnt = 0;
        if(left < right)
        {
            int mid = left + (right - left) / 2;
            
            cnt = mergeSort(nums, left, mid);
            
            cnt += mergeSort(nums, mid+1, right);
            
            cnt += merge(nums, left, mid, right);
        }
        
        return cnt;
    }
    
    int reversePairs(vector<int>& nums) {
        
        return mergeSort(nums, 0, nums.size() -1);
    }
};
