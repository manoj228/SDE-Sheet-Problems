Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

1) 
// first approach is sort and compare intervals
//Time complexity : O(nlogn)
//Space complexity: O(n)

class Solution {
public:    
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int n = intervals.size();
        if(n <= 1) return intervals;
       
        // O(log n) for sorting intervals
        sort(intervals.begin(), intervals.end());
        vector<vector<int>> res;
        
        vector<int> t = {intervals[0]};
        
        // O(n) - for traversign array
        for(int i=1; i<n; i++)
        {
            if(t[1] >= intervals[i][0])
            {
                t[1] = max(t[1], intervals[i][1]);
            }
            else {
                
                res.push_back(t);
                
                t = {intervals[i]};
            }
        }
        
        res.push_back(t);
        
        return res;
    }
    
};


2)
// it is similar to first approach, only dif is instead of storing in vector, we are updating values in given array itself
// so we can reduce time complexity
// Time complexity : O(nlogn)
// space complexity : O(1)
class Solution {
public:    
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int n = intervals.size();
        if(n <= 1) return intervals;
       
        // O(log n) for sorting intervals
        sort(intervals.begin(), intervals.end());
        vector<vector<int>> res;
        
        //taking one variable instead of vector
        int ind = 0;
        
        // O(n) - for traversign array
        for(int i=1; i<n; i++)
        {
            // update the intervals if intervals at ind is >= current intervals
            if(intervals[ind][1] >= intervals[i][0])
                intervals[ind][1] = max(intervals[ind][1], intervals[i][1]);
            else                
               intervals[++ind] = intervals[i];
        }
        
        // resizing the original intervals 2d vector
        // as we updated the intervals upto ind position
        intervals.resize(ind+1);
        
        return intervals;
    }
    
};
