I/p : 0 - 1 , w - 9
o/p : 0 , 9

I/p : 0 - 1 , w - 1
      0 - 2 , w - 6
      1 - 2 , w - 3
o/p : 4 , 3 , 0



// Time complexity : O(V+E(logV)) = O(VlogV)
// Space complexity : O(V) + O(V)
class Solution
{
	public:
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        //distance array
        vector<int> dist(V, INT_MAX);
        
        // dist, node (minheap)
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>> > pq;
        
        // starting distance 0
        dist[S] = 0;
        
        // push into priority_queue
        pq.push({0, S});
        
        while(!pq.empty())
        {
            // take distance and node from queue 
            int curDist = pq.top().first;
            int curNode = pq.top().second;
            pq.pop();
            
            // traverse its neighbours
            for(int i = 0; i < adj[curNode].size(); i++)
            {
                int adjNode = adj[curNode][i][0] , adjDist = adj[curNode][i][1];
                
                // check for minimum distance
                // here dist[curNode] is similar to curDist
                if(dist[adjNode] > dist[curNode] + adjDist)
                {
                    dist[adjNode] = dist[curNode] + adjDist;
                    pq.push({dist[adjNode], adjNode});
                }
            }
            
        }
        
        
        return dist;
    }
};
