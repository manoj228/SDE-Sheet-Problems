Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Output: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]
 
 
 1) // Brute force solution
 // we can use two for loops, check if sum is equal to target and return position
 
 // Time complexity : O(n * n)
 // Space complexity : O(1)
 
 
 2) // better solution we can use hashing
 
 // Time complexity : O(n)
 // Space complexity : O(n)
 
 class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        
        vector<int> res;
        unordered_map<int,int> mp;
        
        for(int i=0; i<nums.size(); i++)
        {
            if(mp.find(target - nums[i]) != mp.end())
            {
                res.push_back(mp[target - nums[i]]);
                res.push_back(i);
            }
            
            mp[nums[i]] = i;
        }
               
        return res;
    }
};
