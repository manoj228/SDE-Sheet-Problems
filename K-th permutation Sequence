The set [1, 2, 3, ..., n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

 

Example 1:

Input: n = 3, k = 3
Output: "213"
Example 2:

Input: n = 4, k = 9
Output: "2314"
Example 3:

Input: n = 3, k = 1
Output: "123"

// Time complexity : O(n)
// space complexity : O(n)
class Solution {
public:
    string getPermutation(int n, int k) {
        
        vector<int> numbers;
        int fact = 1;
        
        for(int i=1; i<n; i++)
        {
            fact *= i;
            // storing the all the numbers 1 .. n
            numbers.push_back(i);
        }
        // including n
        numbers.push_back(n);
        
        k -= 1;
        string res = "";
        
        cout << fact << endl;
        while(1)
        {
            // calculating the index of the picking element
            int temp = k / fact;
            
            res += to_string(numbers[temp]);
            // deleting the picked element in the numbes
            numbers.erase(numbers.begin() + temp);
            
            // stop the iteration , if we picked all the element
            if(numbers.size() == 0) return res;
            
            k = k % fact;
            
            fact = fact / numbers.size();
        }
        
        return "";
        
    }
};
