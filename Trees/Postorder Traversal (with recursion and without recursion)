With Recursion:
class Solution {
    private:
    void helper(TreeNode *root, vector<int> &res)
    {
        if(!root)
            return;
        
        helper(root -> left, res);
        
        helper(root -> right, res);
        
        res.push_back(root -> val);
    }
    
public:
    vector<int> postorderTraversal(TreeNode* root) {
        if(!root)
            return {};
        
        vector<int> res;
        
        helper(root, res);
        
        return res;
    }
};


Without Recursion:
Using 2 stacks :

class Solution {
    private:
    void helper(TreeNode *root, vector<int> &res)
    {
        if(!root)
            return;
        
        stack<TreeNode *> s1, s2;
        s1.push(root);
        
        while(!s1.empty())
        {
            TreeNode *cur = s1.top(); 
            s1.pop();
            s2.push(cur);
            
            if(cur -> left)
                s1.push(cur -> left);
            
            if(cur -> right)
                s1.push(cur -> right);
        }
        
        while(!s2.empty())
        {
            res.push_back(s2.top() -> val);
            s2.pop();
        }
    }
    
public:
    vector<int> postorderTraversal(TreeNode* root) {
        if(!root)
            return {};
        
        vector<int> res;
        
        helper(root, res);
        
        return res;
    }
};

Using one stack:
class Solution {
    private:
    void helper(TreeNode *root, vector<int> &res)
    {
        if(!root)
            return;
        
        stack<TreeNode *> st;
        
        TreeNode *cur = root;
        
        while(cur || !st.empty())
        {
            if(cur)
            {
                st.push(cur);
                cur = cur -> left;
            }
            
            else{
                TreeNode *temp = st.top()-> right;
                
                if(!temp)
                {
                    temp = st.top();
                    st.pop();
                    
                    res.push_back(temp -> val);
                    
                    while(!st.empty() && st.top() -> right == temp)
                    {
                        temp = st.top(); st.pop();
                        res.push_back(temp -> val);
                    }
                }
                else{
                    cur = temp;
                }
            }
        }
        
    }
    
public:
    vector<int> postorderTraversal(TreeNode* root) {
        if(!root)
            return {};
        
        vector<int> res;
        
        helper(root, res);
        
        return res;
    }
};
