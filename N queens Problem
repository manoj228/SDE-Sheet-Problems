The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

Example 1:
Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above

Example 2:
Input: n = 1
Output: [["Q"]]

// recursive solution
class Solution {
public:
    bool isSafe(vector<string> &board, int row, int col, int n)
    {
        // to make original copy of row and col
        int duprow = row, dupcol = col;
        
        // check if left upper diagonal has queen or not
        while(row >= 0 && col >= 0){
            if(board[row][col] == 'Q') return false;
            
            row--, col--;
        }
        
        row = duprow, col = dupcol;
        // now left row
        while(col >= 0)
        {
            if(board[row][col] == 'Q') return false;
            
            col--;
        }
        
        
        // check for left lower diagonal has queen or not
        row = duprow, col = dupcol;
        while(row < n && col >= 0)
        {
            if(board[row][col] == 'Q') return false;
            
            row++, col--;
        }
        
        
        return true;        
    }
    
    // checking col by col
    void check(vector<vector<string>> &ans, vector<string> &board, int col, int n)
    {
        if(col == n)
        {
            ans.push_back(board);
            return;
        }
        
        // for a col, we are checking every row
        for(int row = 0; row < n; row++)
        {
            if(isSafe(board, row , col, n))
            {
                // place the queen , if safe
                board[row][col] = 'Q';
                
                // recursion for further col
                check(ans, board, col+1, n);
                
                //remove the queen , for recursive cal
                board[row][col] = '.';
            }
        }
        
    }
    
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n);
        string s(n, '.');
        
        for(int i=0; i<n; i++) board[i] = s;
        
        check(ans, board, 0, n);
        
        return ans;      
        
    }
};
