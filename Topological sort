topo sort : if u -> v then u should come before v

Example 1:

Input:
0 -
1 - 0
2 - 0
3 - 0
Output:
1
Explanation:
The output 1 denotes that the order is
valid. So, if you have, implemented
your function correctly, then output
would be 1 for all test cases.
One possible Topological order for the
graph is 3, 2, 1, 0.


// Time complexity : O(V + E)
// Space complexity : O(V)
class Solution
{
	public:
	void dfs(int cur, vector<int> adj[], vector<bool>& vis, stack<int>& st)
	{
	    // mark cur as visited
	    vis[cur] = true;
	    
	    // traverse its adjacent
	    for(auto v : adj[cur])
	    {
	        if(!vis[v])
	        dfs(v, adj, vis, st);
	    }
	    
	    // once recursion is over, kindly push into stack
	    st.push(cur);
	}
	
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    stack<int> st;
	    vector<bool> vis(V, false);
	    
	    for(int i=0; i<V; i++)
	    {
	        if(!vis[i])
	        dfs(i, adj, vis, st);
	    }
	    
	    vector<int> topo;
	    while(!st.empty())
	    {
	        topo.push_back(st.top());
	        st.pop();
	    }
	    
	    return topo;
	}
};
