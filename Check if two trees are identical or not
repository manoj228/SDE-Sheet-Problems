Example 1:
Input: p = [1,2,3], q = [1,2,3]
Output: true

Example 2:
Input: p = [1,2], q = [1,null,2]
Output: false

Example 3:
Input: p = [1,2,1], q = [1,1,2]
Output: false


// Time complexity : O(n)
// Space complexity : O(1)
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
       if(!p && !q) return true; 
        
        // if any one node is null, then not balanced
        if(!p || !q) return false;
        
        // if both values are same
        // then recur for left and right subtree
        return (p -> val == q -> val && isSameTree(p->left, q->left) 
               && isSameTree(p->right, q->right));
    }
};
