Example 1:
Input: root = [1,2,3,4,5,6,7]
Output: [1,#,2,3,#,4,5,6,7,#]
Explanation: Given the above perfect binary tree (Figure A), 
your function should populate each next pointer to point to its next right node, just like in Figure B.
The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.

Example 2:
Input: root = []
Output: []


// Time complexity : O(n)
// space complexity : O(1)
class Solution {
public:
    void populate(Node *root)
    {
        if(!root) return;
        
        // connect root -> left -> next with right
        if(root -> left) 
            root -> left -> next = root -> right;
        
        // before linking right to null, check its root -> next
        if(root -> right)
            root -> right -> next = (root -> next) ? root -> next -> left: NULL;
        
        // recursion for left sub tree
        populate(root -> left);
        
        // recursion for right sub tree
        populate(root -> right);
    }
    
    Node* connect(Node* root) {
        if(!root) return NULL;
        
        root -> next = NULL;
        
        populate(root);
        
        return root;
    }
};
