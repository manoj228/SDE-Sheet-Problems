Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) 
deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

 
Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.

// Time complexity :  O(M*N)
// Space complexity : O(M*N)

class Solution {
public:
    int lcs(string a, int i, string b, int j,vector<vector<int>>& dp)
    {
        if(i < 0 || j < 0) return 0;
        
        if(dp[i][j] != -1)
            return dp[i][j];
            
        // if both character match move one step ahead
        if(a[i] == b[j])
        return dp[i][j] = 1 + lcs(a, i-1, b, j-1, dp);
        
        // else take move one position from a or b
        return dp[i][j] = max( lcs(a,i-1, b, j, dp), 
                               lcs(a, i,  b, j-1, dp) );
    }
    
    int longestCommonSubsequence(string text1, string text2) {
        
        int m = text1.size(), n = text2.size();
        if(m == 0 || n == 0) return 0;
        
        vector<vector<int>> dp(m, vector<int>(n, -1));
        
        int res = lcs(text1, m-1, text2, n-1, dp);
        
        cout << res << endl;
        
        return res;
    }
};
