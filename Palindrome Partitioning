Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

A palindrome string is a string that reads the same backward as forward.


Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]

Example 2:

Input: s = "a"
Output: [["a"]]

class Solution {
public:
    bool checkForPalindrome(string s,int st,int e)
    {
        while(st <= e)
        {
            if(s[st++] != s[e--]) return false;
        }
        
        return true;
    }
    
    void call(string s,int index, vector<vector<string>> &res,vector<string> &ans)
    {
        if(index == s.size())
        {
            res.push_back(ans);
            return;
        }
        
        // traverse all the possible combination of string
        for(int i=index; i<s.size(); i++)
        {
            // check if its palindrome
            if(checkForPalindrome(s,index,i))
            {
                ans.push_back(s.substr(index, i-index+1));
                // recursive call for next iteration
                call(s,i+1,res,ans);
                ans.pop_back();
            }
        }
    }
    
    vector<vector<string>> partition(string s) {
        
        vector<vector<string>> res;
        vector<string> ans;
        
        call(s,0,res,ans);
        
        return res;
    }
};
