Given an integer array nums that may contain duplicates, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 
Example 1:

Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

Example 2:

Input: nums = [0]
Output: [[],[0]]

// we can use recursion to get all the subsets

//Time complexity : O(n*n)
//space complexity : O(n)

void helper(vector<vector<int>>& res, vector<int>& temp, vector<int>& nums, int pos){
        res.push_back(temp);
        
        for(int i=pos; i<nums.size(); ++i){
            if(i != pos && nums[i] == nums[i - 1]) continue;
            temp.push_back(nums[i]);
            helper(res, temp, nums, i + 1);
            temp.pop_back();
            
        }
    }
    
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> temp;
        sort(nums.begin(), nums.end());
        helper(res, temp, nums, 0);
        return res;
    }
