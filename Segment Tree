/*   
1) Segment tree size ia always 4*n 
root -> present at idx
left child -> present at 2 * idx + 1
right child -> present at 2 * idx + 2

2) Query
low, high -> index of the segement tree
l , r -> represents the range query
	
Two types of query:
Type 1 : min (L, R)
Type 2 : ind, val -> update val at ind

Type 1 Query:
1) Partial Overlap 
	-> call left node
	-> call right node
	return min(left node, right node)

2) No Overlap 
	if [high < l or r > low]
		return INT_MAX 		// we are expecting to find min value 

3) Complete Overlap 
	if(low >= l && high <= r)
	return segement[ind]


Type 2 Query:
void update(ind, low, high, i, val)
{
	if(low == high)
	{
		seg[ind] = val;
		return;
	}
	
	mid = (low + high) >> 1;
	
	if(i <= mid) 
		update(2*ind+1, low, mid, i, val)
	else 
		update(2*ind+2, low, mid, i, val)
		
		
	seg[ind] = min(seg[2*ind+1], seg[2*ind+2])
}

Time complexity : O(4 * N)[worst case] ; 
				  O(N)(best case) => equal the number of nodes visited in segment tree
Space complexity : O(N)

Query Time complexity : 
For small range, it will be in no overlaps => O(log N)
For high range, most cases will be in complete overlaps => O(log N)
For medium range, it will lies in no overlap / complete overlap => nearest to O(logn) i.e twice/thrice of O(logn)

Update Time complexity : O(log N)
*/

#include<bits/stdc++.h>
using namespace std;

class SGTree{
	private:
	vector<int> seg;
	
	public:
	SGTree(int n)
	{
		seg.resize(4 * n + 1);
	}
	
	void build(int ind, int low, int high, int arr[])
	{
		if(low == high)
		{
			seg[ind] = arr[low];
			return;
		}
		
		int mid = (low + high) >> 1;
		
		build(2 * ind + 1, low, mid, arr);
		build(2 * ind + 2, mid + 1, high, arr);
		
		seg[ind] = min(seg[2*ind+1], seg[2*ind+2]);
	}

	int query(int ind, int low, int high, int l, int r)
	{
		// no overlap
		if(r < low || high < l) return INT_MAX;
		
		// complete overlap
		if(low >= l && high <= r) return seg[ind];
		
		int mid = (low + high) >> 1;
		
		int left = query(2 * ind + 1, low, mid, l, r);
		int right = query(2 * ind + 2, mid + 1, high, l, r);
		
		return min(left, right);
	}

	void update(int ind, int low, int high, int pos, int val)
	{
		if(low == high)
		{
			seg[ind] = val;
			return;
		}
		
		int mid = (low + high) >> 1;
		if(pos <= mid)
			update(2*ind+1, low, mid, pos, val);
		else
			update(2*ind+2, mid+1, high, pos, val);
		
		seg[ind] = min(seg[2*ind+1], seg[2*ind+2]);
		
	}
};



void solve()
{
	int n;
	cin >> n;
	
	int arr[n];
	for(int i = 0; i < n; i++) 
		cin >> arr[i];
		
	SGTree seg1(n);
	seg1.build(0, 0, n-1, arr);
	
	int q;
	cin >> q;
	
	int l, r;
	for(int i = 0; i < q; i++)
	{
		int type;
		cin >> type;
		
		if(type == 1)
		{
			cin >> l >> r;
			
			cout << seg1.query(0, 0, n-1, l, r) << endl;
		}
		else if(type == 2)
		{
			int pos, val;
			cin >> pos >> val;
			
			seg1.update(0, 0, n-1, pos, val);
			
			arr[pos] = val;
		}
	}
}

int main()
{
	solve();
	
	return 0;
}
