You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:
Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

Example 2:
Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.

Example 3:
Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
      int r = grid.size();
        int c = grid[0].size();        
        queue<pair<int,int>> q;
        int fresh=0; 
        
        for(int i=0; i<r; i++)
            for(int j=0; j<c; j++)
            {
                if(grid[i][j] == 2)
                    q.push({i,j});
                if(grid[i][j]==1)
                    fresh++;
            }
        
        if(fresh == 0) return 0;
        
        // 4 direction
        int xr[] = {0, 0, 1, -1};
        int yr[] = {1, -1, 0, 0};        
             
        int resCount = -1;
        
        while(!q.empty())
        {
            int size = q.size();    
            // process for all the size of queue
            while(size--)
            {
                pair<int,int> p = q.front(); q.pop();     
            for(int i=0; i<4; i++)
            {
                int nx = p.first + xr[i], ny = p.second + yr[i];
                
                // check for valid direction
                if(nx < 0 || ny < 0 || nx >= r || ny >= c || 
                   grid[nx][ny] != 1) continue; 
               
                // if valid means update as rotten
                if(grid[nx][ny] == 1){                                    
                grid[nx][ny] = 2;                
                q.push({nx,ny});
                --fresh;
                }            
             }
            }
          
            // increment count only a
           resCount++;
        }
        
        // if still fresh orange exist
        if(fresh > 0) return -1;
        
        return resCount;
        
    }
};
