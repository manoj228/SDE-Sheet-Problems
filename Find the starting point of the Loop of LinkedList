Example 1:
Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.

Example 2:
Input: head = [1,2], pos = 0
Output: tail connects to node index 0
Explanation: There is a cycle in the linked list, where tail connects to the first node.

Example 3:
Input: head = [1], pos = -1
Output: no cycle
Explanation: There is no cycle in the linked list.


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        
        if(!head) return head;
        
        ListNode *slow = head , *fast = head;
        int  f=0;
        
        // check if its cycle 
        while(fast && fast -> next)
        {
            slow = slow -> next;
            fast = fast -> next -> next;
    
            if(fast == slow)
            {
             f=1;
             break;
            }
        }
        //if not's cycle
        if(f==0)
        return NULL;
        
        // start from head, check for collision
        slow = head;        
        while(slow != fast)
        {
            slow = slow -> next;
            fast = fast -> next;
        }
        
        return slow;
    }
};
