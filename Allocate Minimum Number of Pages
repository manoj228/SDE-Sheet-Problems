Example 1:
Input:
N = 4
A[] = {12,34,67,90}
M = 2
Output:
113
Explanation: 
Allocation can be done in following ways:
{12} and {34, 67, 90} Maximum Pages = 191
{12, 34} and {67, 90} Maximum Pages = 157
{12, 34, 67} and {90}  Maximum Pages =113
Therefore, the minimum of these cases is 
113, which is selected as the output.

Example 2:

Input:
N = 3
A[] = {15,17,20}
M = 2
Output:
32
Explanation:
Allocation is done as 
{15,17} and {20}

// Time complexity : O(log(sum))
// space complexity : O(1)


class Solution 
{
    public:
    bool allocationPossible(int arr[], int n,int m, int cur_Range)
    {
        int stud = 1, cur = 0;
        
        for(int i=0; i<n; i++)
        {
            //check if curRange is smaller than cur arr[i] value
            if(cur_Range < arr[i]) return false;
            
            if(cur + arr[i] <= cur_Range)
            cur += arr[i];
            
            else{
                // increment students count if range is high
                stud++;
                // if not meet allocation
                if(stud > m) return false;
                
                cur = arr[i];
            }
        }
        
        return true;
    }
    
    int findPages(int arr[], int n, int m) 
    {
        int sum = 0;
        for(int i=0; i<n; i++) sum += arr[i];
        
        int low = 0, high = sum, res = -1;
        
        while(low <= high)
        {
            int mid = (low + high) >> 1;
            
            if(allocationPossible(arr,n,m,mid))
            {
                res = mid;
                high = mid-1;
            }
            
            else
            low = mid + 1;
        }
        
        return res;
    }
};
