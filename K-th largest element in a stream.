Example 1:

Input
["KthLargest", "add", "add", "add", "add", "add"]
[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]
Output
[null, 4, 5, 5, 8, 8]

Explanation
KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);
kthLargest.add(3);   // return 4
kthLargest.add(5);   // return 5
kthLargest.add(10);  // return 5
kthLargest.add(9);   // return 8
kthLargest.add(4);   // return 8

// Time complexity : O(logn)
// space complexity : O(k)
class KthLargest {
public:
    // top element is always minimum
    priority_queue<int, vector<int>, greater<int>> minHeap;
    int len;
    KthLargest(int k, vector<int>& nums) {
        len = k;
        for(auto num : nums)
        {
            minHeap.push(num);
            
            if(k < minHeap.size()) minHeap.pop();
        }
           
    }
    
    int add(int val) {
        
        minHeap.push(val);
            
        if(len < minHeap.size()) minHeap.pop();
        
        return minHeap.top();
    }
};
