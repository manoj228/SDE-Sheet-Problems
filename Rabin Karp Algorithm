Input:  txt[] = "THIS IS A TEST TEXT"
        pat[] = "TEST"
Output: Pattern found at index 10

Input:  txt[] =  "AABAACAADAABAABA"
        pat[] =  "AABA"
Output: Pattern found at index 0
        Pattern found at index 9
        Pattern found at index 12
        
Steps :

1) Calculate Hash value for pattern  for eg: pat[i] - 'A' + 1; (A - 1 , B - 2, ... Z - 26)
2) Calculate hash value for 1st window for text
3) i) If hash(pat) == hash(text), then compare character else break
   ii) Subtract leftmost(MSB) from hash(text) and shift hash(text) by 1
   iii) Add new char to shifted hash(text)
   
1) One way   
// time complexity : O(N + M)
// Space complexity : O(1)
#include <bits/stdc++.h>
using namespace std;

void checkForPattern(string txt, string pat)
{
	int hpat = 0, d = 26, p = 5381;
	/* 
	hpat - hash value for pattern
	d - size of the alphabet
	p - longest prime number
	*/
	
	// hash value for pattern
	for(int i=0; i<pat.size(); i++)
	{
		hpat = hpat * 26 + ((pat[i] - 'A' + 1) % p);
	}
	
	int l = 0 , htxt = 0;
	for(int r = 0; r < txt.size(); r++)
	{
		// calculate hash value for each window
		htxt = htxt * 26 + ((txt[r] - 'A' + 1) % p);
		
		if(r - l + 1 == pat.size())
		{
			if(htxt == hpat) 
			cout << "Pattern Found" << endl;
			
			else
			htxt = htxt * 26 - ((txt[r] - 'A' + 1) * (int)(pow(d, r-1))) % p;
			
			l++;
		}
	}
	
}

int main() {
	string txt, pattern;
	cin >> txt >> pattern;
	
	checkForPattern(txt, pattern);
	
	return 0;
}

2) GFG solution
// time complexity : O(N * M)
// Space complexity : O(1)

#include <bits/stdc++.h>
using namespace std;

// d is the number of characters in the input alphabet
#define d 256

/* pat -> pattern
	txt -> text
	q -> A prime number
*/
void search(char pat[], char txt[], int q)
{
	int M = strlen(pat);
	int N = strlen(txt);
	int i, j;
	int p = 0; // hash value for pattern
	int t = 0; // hash value for txt
	int h = 1;

	// The value of h would be "pow(d, M-1)%q"
	for (i = 0; i < M - 1; i++)
		h = (h * d) % q;

	// Calculate the hash value of pattern and first
	// window of text
	for (i = 0; i < M; i++)
	{
		p = (d * p + pat[i]) % q;
		t = (d * t + txt[i]) % q;
	}

	// Slide the pattern over text one by one
	for (i = 0; i <= N - M; i++)
	{

		// Check the hash values of current window of text
		// and pattern. If the hash values match then only
		// check for characters one by one
		if ( p == t )
		{
			/* Check for characters one by one */
			for (j = 0; j < M; j++)
			{
				if (txt[i+j] != pat[j])
					break;
			}

			// if p == t and pat[0...M-1] = txt[i, i+1, ...i+M-1]
			if (j == M)
				cout<<"Pattern found at index "<< i<<endl;
		}

		// Calculate hash value for next window of text: Remove
		// leading digit, add trailing digit
		if ( i < N-M )
		{
			t = (d*(t - txt[i]*h) + txt[i+M])%q;

			// We might get negative value of t, converting it
			// to positive
			if (t < 0)
			t = (t + q);
		}
	}
}

/* Driver code */
int main()
{
	char txt[] = "GEEKS FOR GEEKS";
	char pat[] = "GEEK";
	
	// A prime number
	int q = 101;
	
	// Function Call
	search(pat, txt, q);
	return 0;
}

// This is code is contributed by rathbhupendra

