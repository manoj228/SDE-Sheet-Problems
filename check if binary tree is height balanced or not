Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: true

Example 2:
Input: root = [1,2,2,3,3,null,null,4,4]
Output: false


// Time complexity : O(n)
// Space complexity : O(1)
class Solution {
public:
    int checkForBalanced(TreeNode *root)
    {
        if(!root) return 0;
        
        // left subtree recursion
        int l = checkForBalanced(root -> left);
        
        // right subtree recursion
        int r = checkForBalanced(root -> right);
        
        // if any height of left or right subtree has -1 , then return -1
        if(l == -1 || r == -1) return -1;
        
        // if dif has more than one , return -1
        if(abs(r - l) > 1) return -1;
        
        // max height
        return 1 + max(l,r) ;
        
    }
    
    bool isBalanced(TreeNode* root) {
        
        if(!root) return true;
        
        int res = checkForBalanced(root);
        
        return res != -1;
    }
};
