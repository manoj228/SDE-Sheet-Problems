A graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.

Return true if and only if it is bipartite.

// time complexity : O(V + E)
// space complexity : O(V)
class Solution {
public:
    bool bipartite(int cur, vector<vector<int>> graph, vector<int> &color)
    {
        // if not colored , color it
        if(color[cur] == -1) color[cur] = 1;
        
        for(int i=0; i<graph[cur].size(); i++)
        {
            // adjacent node
            int v = graph[cur][i];
            
            // if not colored
            if(color[v] == -1)
            {
                // color it with opposite
                color[v] = 1 - color[cur];
                if(!bipartite(v , graph, color)) return false;
            }
            // if already colored, then check if cur and adj are same
            else if(color[v] == color[cur]) return false;
        }
        
        return true;
    }
    
    bool isBipartite(vector<vector<int>>& graph) {
        
        int n = graph.size();
        vector<int> color(n, -1);
        
        for(int i=0; i<n; i++)
        { 
            // if not colored
            if(color[i] == -1)
            {
                // if not partite
                if(!bipartite(i , graph, color)) return false;
            }
        }
        
        return true;
    }
};
