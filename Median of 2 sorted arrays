Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n)). 

Example 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.

Example 3:
Input: nums1 = [0,0], nums2 = [0,0]
Output: 0.00000

Example 4:
Input: nums1 = [], nums2 = [1]
Output: 1.00000

Example 5:
Input: nums1 = [2], nums2 = []
Output: 2.00000

1) // Brute force solution
// we can store all the nums1 and nums2 in single array, sort and find middle element.

//Time complexity : O(m+nlog(m+n)
//Space complexity : O(m+n)

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
      
        vector<int> res;
        
        for(int i=0;i<nums1.size();i++)
            res.push_back(nums1[i]);
        
          for(int i=0;i<nums2.size();i++)
            res.push_back(nums2[i]);
        
        sort(res.begin(),res.end());
        double ans;
        int mid = res.size()/2;
        if(res.size()%2==1)
        {
            ans = res[mid];
        }
        else 
        {
            ans =(double) (res[mid-1] +res[mid]) / 2.0;
        }
        
        return ans;
    }
};

2) // optimal solution is using binary search technique
//Time complexity : O(log(m+n)
//Space complexity : O(1)

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if(nums2.size() < nums1.size())
            return findMedianSortedArrays(nums2, nums1);
            
        int n1 = nums1.size(), n2 = nums2.size();
        
        int left = 0, right = n1;
        //Time complexity : O(log(m+n)
        while(left <= right)
        {
            // find cut1 and cut2
            int cut1 = left + (right - left) / 2;
            int cut2 = (n1 + n2 + 1)/2 - cut1;
            
            // if cut1 or cut2 is 0, then we take minimum value 
            int left1 = cut1 == 0 ? INT_MIN : nums1[cut1-1];
            int left2 = cut2 == 0 ? INT_MIN : nums2[cut2-1];
            
             // if cut1 or cut2 reached the limit then we take maximum value 
            int right1 = cut1 == n1 ? INT_MAX : nums1[cut1];
            int right2 = cut2 == n2 ? INT_MAX : nums2[cut2];
                   
            // if it satifies the condition
            if((left1 <= right2) && (left2 <= right1))
            { 
                if((n1+n2) % 2 == 0)
                    return (max(left1, left2) + min(right1, right2)) / 2.0;
                
                else 
                    return max(left1, left2);
            }
            // left1 has greater value, we need to move left
            else if(left1 > right2)
                right = cut1 - 1;
            
            // else move right
            else
                left = cut1 + 1;
        }
        
        return 0.0;
    }
};
