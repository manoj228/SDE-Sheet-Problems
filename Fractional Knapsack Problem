Given weights and values of N items, we need to put these items in a knapsack of capacity W to get the maximum total value in the knapsack.
Note: Unlike 0/1 knapsack, you are allowed to break the item.  

Example 1:

Input:
N = 3, W = 50
values[] = {60,100,120}
weight[] = {10,20,30}
Output:
240.00
Explanation:Total maximum value of item
we can have is 240.00 from the given
capacity of sack. 

Example 2:

Input:
N = 2, W = 50
values[] = {60,100}
weight[] = {10,20}
Output:
160.00
Explanation:
Total maximum value of item
we can have is 160.00 from the given
capacity of sack.

1) // Brute force solution is trying all the possibilites
// It takes more time

//Time complexitY : O(n*n)
//space complexity : O(1)

2) optimal solution is using greedy method
// sort all the element based on (values / weight) 
// calculate if possible to add the current weight , else find remaining weight, we can add it to result and stop the iteration

//Time complexitY : O(nlogn) + O(n) = O(nlogn)
//space complexity : O(1)
bool cmp(Item a, Item b)
{
    double first = (double)(a.value /(double) a.weight) ;
    double second =(double)(b.value /(double) b.weight) ;
    
    return first > second;
}
class Solution
{
    public:
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n)
    {
        // sorting based on maximum value / weight
        // O(nlogn)
        sort(arr, arr+n, cmp);
        
        double res = 0;
        int curWeight = 0;
        
        // O(n)
        for(int i=0; i<n; i++)
        {
            // if possible to add cur weight with our bag
            if(curWeight + arr[i].weight <= W)
            {
                curWeight += arr[i].weight;
                res += arr[i].value;
            }
            
            // if not possible to add
            else{
                double remainWeight = W - curWeight;
                
                // find res
                res += arr[i].value * (remainWeight/(double)arr[i].weight);
                // stop iteration
                break;
            }
        }
        
        return res;
    }
        
};

