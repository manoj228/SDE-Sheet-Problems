We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].

You're given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.

If you choose a job that ends at time X you will be able to start another job that starts at time X.

 

Example 1:

Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]
Output: 120
Explanation: The subset chosen is the first and fourth job. 
Time range [1-3]+[3-6] , we get profit of 120 = 50 + 70.

Example 2:

Input: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]
Output: 150
Explanation: The subset chosen is the first, fourth and fifth job. 
Profit obtained 150 = 20 + 70 + 60.

Example 3:

Input: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]
Output: 6


// Time complexity : O(N * N)
// Space complexity : O(N + N)

class Solution {
public:
    // take struct to store all into single value
    struct job
    {
        int start;
        int end;
        int profit;
    };
    
    static bool cmp(job a, job b)
    {
        return a.end <= b.end;
    }
    
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
        
        vector<job> jobs;
        
        for(int i = 0; i < startTime.size(); i++)
        {
            int st = startTime[i] ;
            int e = endTime[i];
            int pro = profit[i];
            
            jobs.push_back({st, e, pro});
        }
        
        // sort the jobs array based on end time
        sort(jobs.begin(), jobs.end(), cmp);

        
        // profit arr to store res
        vector<int> res(startTime.size(), 0);
        
        res[0] = jobs[0].profit;
        for(int i=1; i < startTime.size(); i++)
        {
            // updating the cur profit first
            res[i] = max(res[i-1], jobs[i].profit);
            
            for(int j=i-1; j>=0; j--)
            {
                // not overlaps
                if(jobs[j].end <= jobs[i].start)
                {
                    res[i] = max(res[i], res[j] + jobs[i].profit);
                    break;
                }
                
            }
            
            cout << endl;
        }
        
        
        int maxi = INT_MIN;
        for(auto val : res) {
            cout << val << " ";
            maxi = max(maxi , val);
        }
        
        cout << endl;
         
        return maxi;
    }
};
