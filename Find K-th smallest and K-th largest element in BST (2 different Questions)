Example 1:
Input: root = [3,1,4,null,2], k = 1
Output: 1

Example 2:
Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3

// Time complexity : O(n)
// space complexity : O(1)
class Solution {
public:
    // Inorder traversal
    bool findSmall(TreeNode *root, int& curCnt, int k,int& res)
    {
        if(!root) return false;
        
        // recursion for left subtree
        if(findSmall(root->left, curCnt, k, res)) return true;
        
        curCnt++;
        if(curCnt == k){
            res = root -> val;
            return true;
        }
        
        // recursion for right subtree
        if(findSmall(root->right, curCnt, k, res)) return true;
        
        return false;
    }
    
    int kthSmallest(TreeNode* root, int k) {
        int res = -1;
        int curCnt = 0;
        findSmall(root, curCnt, k, res);
        
        return res;
    }
};
