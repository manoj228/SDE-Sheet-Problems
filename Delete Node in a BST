Example 1:
Input: root = [5,3,6,2,4,null,7], key = 3
Output: [5,4,6,2,null,null,7]
Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.
One valid answer is [5,4,6,2,null,null,7], shown in the above BST.
Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.

Example 2:

Input: root = [5,3,6,2,4,null,7], key = 0
Output: [5,3,6,2,4,null,7]
Explanation: The tree does not contain a node with value = 0.
Example 3:

Input: root = [], key = 0
Output: []


// Time complexity : O(H)
// space complexity : O(1)
class Solution {
public:
    TreeNode *findLeftMax(TreeNode *root)
    {
        if(!root->right) return root;
        
        return findLeftMax(root->right);
    }
    
    TreeNode* helper(TreeNode *root)
    {
        if(!root -> left) return root -> right;
        if(!root -> right) return root -> left;
        
        TreeNode *rightChild = root -> right;
        TreeNode *leftMax = findLeftMax(root -> left);
        leftMax -> right = rightChild;
        
        return root -> left;
    }
    
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root) return NULL;
        
        if(root -> val == key)
            return helper(root);
        
        TreeNode *dummy = root;
        while(root)
        {
            if(root -> val < key)
            {
                if(root -> right && root -> right -> val == key)
                    root -> right = helper(root->right);
                else
                    root = root -> right;
            }
            
            else{
                if(root -> left && root -> left -> val == key)
                    root -> left = helper(root -> left);
                else
                    root = root -> left;
            }
        }
            
        return dummy;
    }
};
