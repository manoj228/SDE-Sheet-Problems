KosaRaju's algorithm is used to find all the Strongly Connected Components(SCC)

Steps :

1) sort all the nodes in order of finishing time ( toposort )
2) transpose the graph (indegree to outdegree)
3) do dfs for all stack non-visited elements based on topo sort


Time Complexity : O(N + E) + O(N + E) + O(N + E)
Space complexity : O(N + E) + O(N) + O(N) 


#include <bits/stdc++.h>
using namespace std;

void dfs(int node, vector<int> adj[], vector<bool>& vis, stack<int> &st)
{
	// mark cur node as visited
	vis[node] = true;
	
	// traverse its adjacent
	for(auto it : adj[node])
	{
		if(!vis[it])
		dfs(it, adj, vis, st);
	}
	
	// insert into stack, once all dfs over
	st.push(node);
}

void revDfs(int node, vector<int> transpose[], vector<bool> &vis)
{
	cout << node << " ";
	
	vis[node] = true;
	
		// traverse its adjacent
	for(auto it : transpose[node])
	{
		if(!vis[it])
		revDfs(it, transpose, vis);
	}
}

int main() {
	int n, m;
    cin >> n >> m; 
	vector<int> adj[n]; 
	for(int i = 0;i<m;i++) {
	    int u, v;
	    cin >> u >> v; 
	    adj[u].push_back(v);
	}
	
	vector<bool> vis(n, false);
	
	stack<int> st;
	
	// 1) sort all the nodes (topo sort)
	for(int i=0; i<n; i++)
	{
		if(!vis[i])
		dfs(i, adj, vis, st);
	}
	
	vector<int> transpose[n]; 
	// 2) transpose the graph
	for(int i=0; i<n; i++)
	{
		// mark all nodes as unvisited
		vis[i] = false;
		for(auto it : adj[i])
		{
			// make transpose
			transpose[it].push_back(i);
		}
	}
	
	// 3) do dfs for all stack elements
	while(!st.empty())
	{
		int curNode = st.top(); st.pop();
		
		if(!vis[curNode])
		revDfs(curNode, transpose, vis);
		
		cout << endl;
	}
	
	
	
	return 0;
}
