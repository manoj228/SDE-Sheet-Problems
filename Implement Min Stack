Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the MinStack class:

MinStack() initializes the stack object.
void push(val) pushes the element val onto the stack.
void pop() removes the element on the top of the stack.
int top() gets the top element of the stack.
int getMin() retrieves the minimum element in the stack.
 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2

class MinStack {
public:
    /** initialize your data structure here. */
    stack<int> a, b;
    MinStack() {
        
    }
    
    void push(int val) {
        // always insert into a
        a.push(val);
        
        // insert into b only if b is empty or b.top >= val
        if(b.empty() || val <= b.top()) b.push(val);
    }
    
    void pop() {
        // if both top values are same, then delete from a and b
        if(a.top() == b.top()) b.pop();
        
        //else, delete from a alone
        a.pop();
            
    }
    
    int top() {
        if(!a.empty()) 
            return a.top();
        
        return b.top();
    }
    
    int getMin() {
        if(!b.empty()) return b.top();
        
        return a.top();
     }
};
