Example 1:
Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
Output: [3,9,20,null,null,15,7]

Example 2:
Input: inorder = [-1], postorder = [-1]
Output: [-1]

// Time complexity : O(n)
// Space complexity : O(1)
class Solution {
public:
    TreeNode* BT(vector<int>& in, vector<int>& pre, int start, int end, int& postIdx, unordered_map<int,int>& mp)
    {
        // base case
        if(start > end) return NULL;
        
        TreeNode *temp = new TreeNode(pre[postIdx--]);
        
        // if reached end
        if(start == end) return temp;
        
        // find pos of cur node
        int range = mp[pre[postIdx+1]];
        
        // recur for right
        temp -> right = BT(in, pre, range+1, end, postIdx, mp);
        
        // recur for left
        temp -> left = BT(in, pre, start, range-1, postIdx, mp);
        
        return temp;
    } 
    
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        unordered_map<int,int> mp;
        
        for(int i=0; i<inorder.size(); i++)
            mp[inorder[i]] = i;
        
        int postIdx = postorder.size()-1;
        return BT(inorder, postorder, 0, inorder.size()-1, postIdx, mp);
    }
};
