Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.


// Time complexity: O(N)
// space complexity : O(1)

class Solution {
public:
    
    int maxProduct(vector<int>& nums) {
        
        int res = nums[0];
        int n = nums.size(), l = 0, r = 0;
        
        for(int i=0; i<n; i++)
        {
            // check for prefix product is non-zero
            l = ( l ? l : 1 ) * nums[i];
            
            // check for suffix product is non-zero
            r = ( r ? r : 1 ) * nums[n - 1 - i];
            
            res = max({res,l,r});
        }
        
        return res;
    }
};
