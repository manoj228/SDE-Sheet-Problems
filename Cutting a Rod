
Given a rod of length n inches and an array of prices that includes prices of all pieces of size smaller than n. 
Determine the maximum value obtainable by cutting up the rod and selling the pieces. 
For example, if the length of the rod is 8 and the values of different pieces are given as the following, then the maximum obtainable value is 22 
(by cutting in two pieces of lengths 2 and 6) 

length   | 1   2   3   4   5   6   7   8  
--------------------------------------------
price    | 1   5   8   9  10  17  17  20
And if the prices are as following, then the maximum obtainable value is 24 (by cutting in eight pieces of length 1) 

length   | 1   2   3   4   5   6   7   8  
--------------------------------------------
price    | 3   5   8   9  10  17  17  20



// Recursive solution

// time complexity : O(pow(2*N))
// space complexity : O(1)

#include <bits/stdc++.h>
using namespace std;

int cutRod(int price[], int i, int n, int maxLen,vector<vector<int>> &dp)
{
	// base case
	if(i >= n || maxLen == 0) return 0;
	
	// i - 1 denotes index starts from 0 
	// but to reduce rod length, we have consider index has to index + 1 ,
	// so, rod length = rod length - (index + 1)
	if(maxLen - i - 1 >= 0)
	{
		// picking
		int l = price[i] + cutRod(price, i, n, maxLen - (i + 1), dp);
		
		// not picking
		int r = cutRod(price, i+1, n, maxLen, dp);
		
		return max(l ,r);
	}
	
	
	return cutRod(price, i+1, n, maxLen, dp);
}

int main() {
	int price[] = {1, 5, 8, 9};
	int n = sizeof(price) / sizeof(price[0]);
	
	vector<vector<int>> dp(n, vector<int>(n, -1));
	cout << cutRod(price, 0, n, n, dp);
	
	return 0;
}
