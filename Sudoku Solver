Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
The '.' character indicates empty cells.


Example 1

Input: board = [["5","3",".",".","7",".",".",".","."],
                ["6",".",".","1","9","5",".",".","."],
                [".","9","8",".",".",".",".","6","."],
                ["8",".",".",".","6",".",".",".","3"],
                ["4",".",".","8",".","3",".",".","1"],
                ["7",".",".",".","2",".",".",".","6"],
                [".","6",".",".",".",".","2","8","."],
                [".",".",".","4","1","9",".",".","5"],
                [".",".",".",".","8",".",".","7","9"]]
                
Output: [["5","3","4","6","7","8","9","1","2"],
         ["6","7","2","1","9","5","3","4","8"],
         ["1","9","8","3","4","2","5","6","7"],
         ["8","5","9","7","6","1","4","2","3"],
         ["4","2","6","8","5","3","7","9","1"],
         ["7","1","3","9","2","4","8","5","6"],
         ["9","6","1","5","3","7","2","8","4"],
         ["2","8","7","4","1","9","6","3","5"],
         ["3","4","5","2","8","6","1","7","9"]]

class Solution {
public:
    bool isSafe(vector<vector<char>> &board,int row, int col, int num)
    {
        // check for cur row
        for(int i=0; i<9; i++) {
            if(board[row][i] == num) return false;
        }
        
        // check for cur col
        for(int i=0; i<9; i++) {
            if(board[i][col] == num) return false;
        }
        
        // check for 3 X 3
        int curRow = row - row % 3 , curCol = col - col % 3;
        for(int i=0; i<3; i++)
        {
            for(int j=0; j<3; j++)
            {
                if(board[i + curRow][j + curCol] == num) return false;
            }
        }
        
        // if safe
        return true;
    }
    
    
    
    bool solve(vector<vector<char>> &board, int row, int col)
    {
        // if reached final row
        if(row == 9) return true;
        
        // if reached final col of row, then recursively call for next row
        if(col == 9) return solve(board, row+1, 0);
        
        //if board has numbers, then call for next col
        if(board[row][col] != '.') return solve(board, row, col+1);
        
        // check for all the numbers
        for(char c = '1'; c <= '9'; c++)
        {
            if(isSafe(board, row, col, c))
            {
                // place the number, if safe
                board[row][col] = c;
                
                if(solve(board, row, col+1)) return true;
                
                board[row][col] = '.';
            }
        }
        
        return false;
    }
    
    void solveSudoku(vector<vector<char>>& board) {
        solve(board, 0, 0);
    }
};
