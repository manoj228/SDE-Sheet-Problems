Example 1:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.

Example 2:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.


// Time complexity : O(n)
// space complexity : O(1)

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        
        if(!root) return NULL;
        
        // if we meet immediately any one of the node
        // return root
        if(root -> val == p -> val || root -> val == q -> val)
            return root;
        
        // recur for left subtree
        TreeNode *left = lowestCommonAncestor(root -> left, p , q);
        
        // recur for right subtree
        TreeNode *right = lowestCommonAncestor(root -> right, p, q);
        
        // if both exist, return root
        if(left && right) return root;
        
        // else return left or right which is present
        return left ? left : right;
    }
};
