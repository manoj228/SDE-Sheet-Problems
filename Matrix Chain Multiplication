Given a sequence of matrices, find the most efficient way to multiply these matrices together.
The efficient way is the one that involves the least number of multiplications.

The dimensions of the matrices are given in an array arr[] of size N
(such that N = number of matrices + 1) where the ith matrix has the dimensions (arr[i-1] x arr[i]).

Example 1:

Input: N = 5
arr = {40, 20, 30, 10, 30}
Output: 26000
Explaination: There are 4 matrices of dimension 
40x20, 20x30, 30x10, 10x30. Say the matrices are 
named as A, B, C, D. Out of all possible combinations,
the most efficient way is (A*(B*C))*D. 
The number of operations are -
20*30*10 + 40*20*10 + 40*10*30 = 26000.

Example 2:

Input: N = 4
arr = {10, 30, 5, 60}
Output: 4500
Explaination: The matrices have dimensions 
10*30, 30*5, 5*60. Say the matrices are A, B 
and C. Out of all possible combinations,the
most efficient way is (A*B)*C. The 
number of multiplications are -
10*30*5 + 10*5*60 = 4500.


/ Time complexity : O(2^N)
// space complexity : O(N*N)
class Solution{
public: 
    int findMinMul(int arr[],int i, int j, vector<vector<int>> &dp)
    {
        if(i == j) return 0;
        
        // memoization
        if(dp[i][j] != -1) return dp[i][j];
        
        
        int mini = INT_MAX;
        
        for(int k=i; k<j; k++)
        {
            // find count by trying all possiblities
            int resCount = findMinMul(arr, i, k, dp) + 
                           findMinMul(arr, k+1, j, dp) +
                           (arr[i-1] * arr[k] * arr[j]);
                           
            mini = min(mini, resCount);
        }
        
        return dp[i][j] = mini;
    }


    int matrixMultiplication(int N, int arr[])
    {
        vector<vector<int>> dp(N, vector<int>(N, -1));
        return findMinMul(arr, 1, N-1, dp);
    }
};
