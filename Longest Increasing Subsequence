Given an integer array nums, return the length of the longest strictly increasing subsequence.

A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements.
For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].

 

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
Example 2:

Input: nums = [0,1,0,3,2,3]
Output: 4
Example 3:

Input: nums = [7,7,7,7,7,7,7]
Output: 1

1) DP solution
// Time complexity  : O(N*N)
// space complexity : O(1)

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        
        vector<int> dp(nums.size(), 1);
        
        for(int i=0; i<nums.size(); i++)
        {
            for(int j=0; j<i; j++)
            {
                // j is the left value before i
                // so nums[j] should be less than nums[i] 
                // and also compare dp[j] + 1 > dp[i];
                if(nums[j] < nums[i] && dp[i] < dp[j] + 1)
                    dp[i] = dp[j] + 1;
            }
        }
        
        // greater element
        return *max_element(dp.begin(), dp.end());
    }
};

2) Optimal solution
// Time complexity  : O(NlogN)
// space complexity : O(1)

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        
        vector<int> res;
        
        for(auto ele : nums)
        {
            // res arr is empty or last element in arr should be less than ele
            if(res.empty() || res[res.size()-1] < ele)
            {
                res.push_back(ele);
            }
            else{
                // check for number which is less than ele
                auto it = lower_bound(res.begin(), res.end(), ele);
                
                // replace that number with cur element
                *it = ele;
            }
        }
        
        
        return res.size();
    }
};
