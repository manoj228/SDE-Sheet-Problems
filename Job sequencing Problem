Input: Four Jobs with following 
deadlines and profits
JobID  Deadline  Profit
  a      4        20   
  b      1        10
  c      1        40  
  d      1        30
Output: Following is maximum 
profit sequence of jobs
        c, a   


Input:  Five Jobs with following
deadlines and profits
JobID   Deadline  Profit
  a       2        100
  b       1        19
  c       2        27
  d       1        25
  e       3        15
Output: Following is maximum 
profit sequence of jobs
        c, a, e
        

1) // Brute force solution 
// we are using greedy technique
//time complexity: O(nlogn) +  O(n*n)
// Space complexity : O(n)

bool com(Job a,Job b){
    return a.profit>b.profit;
}

class Solution 
{
    public:
    
    vector<int> JobScheduling(Job arr[], int n)
    { 
        //Sort the jobs according to maximum profit
        //o(nlogn)
        sort(arr,arr+n,com);
        
        bool check[n+1] = {-1};
        int count = 0, profit = 0;
        
        // O(n)
        for(int i=0; i<n; i++)
        {
            // O(n)
            for(int j=min(arr[i].dead, n); j >= 1; j--)
            {
                // if slot is available
                if(check[j] == -1){ 
                    // allocate it
                    check[j] = 1;
                    // add it to result profit
                    profit += arr[i].profit;
                    
                    // increment the count of jobs
                    count++;
                    break;
                }
            }
            
        }
        
        return {count, profit};
    } 
