Example 1:
Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]

Example 2:
Input: head = [[1,1],[2,1]]
Output: [[1,1],[2,1]]

Example 3:
Input: head = [[3,null],[3,0],[3,null]]
Output: [[3,null],[3,0],[3,null]]

Example 4:
Input: head = []
Output: []
Explanation: The given linked list is empty (null pointer), so return null.

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    
    Node* cloned(Node *head)
    {
        Node *cur = head , *temp;
        
        // creating another copy with next pointer
        while(cur)
        {
            temp = cur -> next;
            cur -> next = new Node(cur->val);
            cur -> next -> next = temp;
            cur = temp;
        }
        
        cur = head;        
        while(cur)
        {
            // linking the random pointer for copy linked list
        if(cur -> next)
         cur -> next -> random = cur-> random ? 
                                cur -> random -> next : cur -> random;
             
        cur = cur -> next ? cur -> next -> next : cur -> next; 
        }
        
        Node *org = head , *clone = head -> next;
        temp = clone;
        
        while(org && clone)
        {
            // to make original pointer
            org -> next = org -> next ? org -> next -> next : org -> next;
            
            // to make clone pointer
            clone -> next = clone -> next ? clone -> next -> next : clone -> next;
            
            org = org -> next;
            clone = clone -> next;
        }
        
     return temp;   
    }
    
    Node* copyRandomList(Node* head) {
        
        if(!head) 
            return NULL;
        
        Node *clone = cloned(head);
        return clone;
    }
};
