Input: arr[] = {15, -2, 2, -8, 1, 7, 10, 23};
Output: 5
Explanation: The longest sub-array with 
elements summing up-to 0 is {-2, 2, -8, 1, 7}

Input: arr[] = {1, 2, 3}
Output: 0
Explanation:There is no subarray with 0 sum

Input:  arr[] = {1, 0, 3}
Output:  1
Explanation: The longest sub-array with 
elements summing up-to 0 is {0}

1) // Brute force solution
// we can check length of all subarrays and check for longest subarray 

// time complexity : O(n*n)
// space complexity :O(1)

2) // optimal solution is using hashing techique

// Time complexity : O(n)
// space complexity : O(n)

int maxLen(int A[], int n)
{
    // Your code here
    
    int maxLen = 0, sum = 0;
    // O(n) - for space
    unordered_map<int,int> mp;
    
    // O(n)
    for(int i=0; i<n; i++)
    {
        sum += A[i];
        
        // check if sum is zero, then our len is upto cur index
        if(sum == 0) maxLen = i+1;
        
        // if sum is present in map, then update the length
        if(mp.find(sum) != mp.end())
        {
            maxLen = max(maxLen, i - mp[sum]);
        }
        
        // else put in map
        else
        mp[sum] = i;
    }
    
    return maxLen;
}
