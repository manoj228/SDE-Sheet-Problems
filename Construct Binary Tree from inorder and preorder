Example 1:

Input:
N = 4
inorder[] = {1 6 8 7}
preorder[] = {1 6 7 8}
Output: 8 7 6 1
Example 2:

Input:
N = 6
inorder[] = {3 1 4 0 5 2}
preorder[] = {0 1 3 4 2 5}
Output: 3 4 1 5 2 0
Explanation: The tree will look like
       0
    /     \
   1       2
 /   \    /
3    4   5


// Time complexity : O(n)
// Space complexity : O(n)
class Solution{
    public:
    Node* BT(int in[], int pre[], int start, int end, int& preIdx, unordered_map<int,int>& mp)
    {
        // base case
        if(start > end) return NULL;
        
        Node *temp = new Node(pre[preIdx++]);
        
        // if reached end
        if(start == end) return temp;
        
        // find pos of cur node
        int range = mp[pre[preIdx-1]];
        
        // recur for left
        temp -> left = BT(in, pre, start, range-1, preIdx, mp);
        
        // recur for right
        temp -> right = BT(in, pre, range+1, end, preIdx, mp);
        
        return temp;
    } 
    
    Node* buildTree(int in[],int pre[], int n)
    {
        unordered_map<int, int> mp;
        
        for(int i=0; i<n; i++)
        mp[in[i]] = i;
        
        int preIdx = 0;
        return BT(in, pre, 0, n-1, preIdx, mp);
    }
};
