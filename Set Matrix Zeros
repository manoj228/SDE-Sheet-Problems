Example 1:

Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]

Example 2:

Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]


1) //Brute Force solution
// steps:
// we are taking two vector row and col with intialize to 1
// traverse matrix array , whenever find 0, update corresponding row and col as 0
// traverse row vector, assign zeros in particular row
// traverse col vector, assign zeros in particular col

// Time complexity : O(m x n)
// Space complexity : O(m x n) , m - row size, n - col size 

 void setZeroes(vector<vector<int>>& matrix) {        
        vector<int> row(matrix.size(),1), col(matrix[0].size(), 1);
        
        // O(m x n)
        for(int i=0; i<matrix.size(); i++)
        {
            for(int j=0; j<matrix[0].size(); j++)
            {
                if(matrix[i][j] == 0)
                    row[i] = 0, col[j] = 0;
            }
        }        
        
        // // O(m x n) - check 0 in row vector
        for(int k=0; k<row.size(); k++)
        {
            if(row[k] == 0) 
            {
                for(int i=0; i<matrix[0].size(); i++)
                matrix[k][i] = 0;
            }
        }
        
        // // O(m x n) -check 0 in col vector
        for(int k=0; k<col.size(); k++)
        {
            if(col[k] == 0)
            {
                for(int i=0; i<matrix.size(); i++)
                    matrix[i][k] = 0;
            }
        }
    }
};

2) // optimal approach

// start traverse matrix if value is zero, then update corresponding row and column 
// Time complexity : O(m*n)
// space complexity : O(1)

class Solution {
public:    
    void setZeroes(vector<vector<int>>& matrix) {
    int col0 = 1, rows = matrix.size(), cols = matrix[0].size();

    // O(m * n)
    // col0 - is to check if first col has value 0 or not
    // because, col0 has 0 for all values, then whole matrix should be zero
    for (int i = 0; i < rows; i++) {
        if (matrix[i][0] == 0) col0 = 0;
        for (int j = 1; j < cols; j++)
            if (matrix[i][j] == 0)
                 matrix[i][0] = matrix[0][j] = 0;
    }

    // O(m * n)
    for (int i = rows - 1; i >= 0; i--) {
        for (int j = cols - 1; j >= 1; j--)
            if (matrix[i][0] == 0 || matrix[0][j] == 0)
                matrix[i][j] = 0;
        if (col0 == 0) matrix[i][0] = 0;
    }
        
      
    }
};
