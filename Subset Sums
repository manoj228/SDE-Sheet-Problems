Example 1:
Input:
N = 6
arr[] = {3, 34, 4, 12, 5, 2}
sum = 9
Output: 1 
Explanation: Here there exists a subset with
sum = 9, 4+3+2 = 9.

Example 2:
Input:
N = 6
arr[] = {3, 34, 4, 12, 5, 2}
sum = 30
Output: 0 
Explanation: There is no subset with sum 30.


// we can use dynamic programming to find if given input makes zero or not
// Time complexity : O(N * sum)
// space complexity : O(N * sum)

 bool check(int arr[], int sum, int n, int ind,vector<vector<int>>& dp )
    {
        if(sum == 0) return true;
        
        if(ind == n) return false;
        
        if(dp[ind][sum] != -1) return dp[ind][sum];
        
        return dp[ind][sum] = check(arr, sum, n, ind+1, dp) || 
                              check(arr, sum-arr[ind], n, ind+1, dp);
    }

    bool isSubsetSum(int N, int arr[], int sum){
        
        vector<vector<int>> dp(N+1, vector<int>(sum+1, -1));
        
        if(check(arr, sum, N, 0, dp)) return true;
        
        return false;
        
    }
