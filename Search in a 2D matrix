Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

1) // Brute fore solution
// we can linearly iterate the matrix and return true or false

// Time complexity : O(n*n)
// space complexity : O(1)

2) //second approach is using binary search for every row

// time complexity : O(nlogn)
// space complexity : O(1)

3) 
// start last column value of first row
// move left , if cur value is greater than target 
// else, move bottom 

// time complexity : O(m * n)
// space complexity : O(1)

class Solution {
public:
    
  
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        int i = 0, j = matrix[0].size() - 1;
        
        // O(n*n)
        while(i < matrix.size() && j >= 0)
        {
            if(matrix[i][j] == target) return true;
            
            else if(matrix[i][j] > target) j--;
            
            else
                i++;
        }
        
        
        return false;
  
    }
};


4) // optimal solution is using binaray search for whole matrix

// time complexity : O(log(m*n))
// space complexity : O(1)
class Solution {
public:
    
  
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        int m = matrix.size(), n = matrix[0].size();
        
        // taking limit 0 .., 11 (last index)
        int left = 0, right = (m * n) - 1; 
        
        
        // O(log(m*n))
        while(left <= right){
            
            int mid = left + (right - left) / 2;
            
            if(matrix[mid/n][mid%n] == target)
                return true;
            
            else if(matrix[mid/n][mid%n] > target) right = mid-1;
            
            else left = mid+1;
        }
        
        return false;
  
    }
};
