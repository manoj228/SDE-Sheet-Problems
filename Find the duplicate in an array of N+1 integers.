Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3


1)
//first solution is simple
// we can use set to store data . While storing , we need to check if it is already present in set. then it is the duplicate number

// Time complexity :O(n)
// Space complexity :O(n)

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        
        set<int> s;
        for(int i=0; i<nums.size(); i++)
        {
            if(s.find(nums[i]) != s.end())
            {
                return nums[i];
            }
            
            s.insert(nums[i]);
        }
        
        return -1;
    }
};


2) 
// this approach is better than previous one
// without storing values, we can easily find the duplicate number 
// Time complexity : O(n)
// Space complexity : O(1)
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        
       // O(n) for traversing array
       for(int i=0; i<nums.size(); i++)
       {
           if(nums[abs(nums[i]) - 1] > 0)
               nums[abs(nums[i]) - 1] = -nums[abs(nums[i]) - 1];
           else
               return abs(nums[i]);
       }
        
        return -1;
    }
};
