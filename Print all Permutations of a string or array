Given a string S. The task is to print all permutations of a given string.

Example 1:

Input: ABC
Output:
ABC ACB BAC BCA CAB CBA
Explanation:
Given string ABC has permutations in 6 
forms as ABC, ACB, BAC, BCA, CAB and CBA .

Example 2:

Input: ABSG
Output:
ABGS ABSG AGBS AGSB ASBG ASGB BAGS 
BASG BGAS BGSA BSAG BSGA GABS GASB 
GBAS GBSA GSAB GSBA SABG SAGB SBAG 
SBGA SGAB SGBA
Explanation:
Given string ABSG has 24 permutations.

// we can use recursive solution

// Time complexity : O(n! * n)
// space complexity : O(n)

class Solution
{
	public:
	    void call(string &s,int ind, vector<string>& res)
	    {
	        if(ind == s.size()-1){
	            res.push_back(s);
	            return;
	        }
	        
	        for(int i = ind; i <s.size(); i++)
	        {
	            swap(s[ind], s[i]);
	            
	            call(s, ind+1, res);
	           
	            swap(s[ind], s[i]);
	        }

         return;
	    }
	    
		vector<string>find_permutation(string S)
		{
		   vector<string> res;
		   
		   call(S, 0, res);
		   
		   sort(res.begin(), res.end());
		   
		   return res;
		}
};


