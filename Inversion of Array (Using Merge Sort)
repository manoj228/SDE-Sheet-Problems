two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j 
Example: 

Input: arr[] = {8, 4, 2, 1}
Output: 6

Explanation: Given array has six inversions:
(8, 4), (4, 2), (8, 2), (8, 1), (4, 1), (2, 1).

1) // Brute Force solution
// use two for loops just increment the count if a[i] > a[j]

// Time complexity : O(n*n)
// Space complexity : O(1)



long long int inversionCount(long long arr[], long long N)
{
   int resCount = 0;
   
   for(int i=0; i<N; i++)
   {
       for(int j=i+1; j < N; j++)
       {
           resCount += (arr[i] > arr[j]) ? 1 : 0;
       }
   }
   
   return resCount;
}



2)
// second approach is finding the inversion count while using mergesort
// Time complexity : O(nlogn)
// Space complexity :O(n)

  
   long long int callMerge(long long arr[], int left, int mid, long long right, long long temp[])
  {
   long long int i = left ; // left subarray index
    long long int j = mid ; // right subarray index
    long long int k = left ; // res array index
    
     long long int invCnt = 0;
    
    while((i < mid) && (j <= right))
    {
        if(arr[i] <= arr[j])
        temp[k++] = arr[i++];
        
        else{
            temp[k++] = arr[j++];
            
            // mid - i means 
            // if arr[i] > arr[j] , then arr[i .... mid] > arr[j] because array is sorted
            invCnt += (mid - i);
        }
    }
    
    while(i <= mid-1)   temp[k++] = arr[i++];
    
    while(j <= right) temp[k++] = arr[j++];
    
    for(i=left ; i<=right; i++) arr[i] = temp[i];
    
    return invCnt;
   }
    
    long long int callMergeSort(long long arr[], int left, long long right, long long temp[])
    {
        long long resInvCnt = 0;
        
        if(left < right)
        {
            int mid = left + (right - left) / 2;
            
            resInvCnt += callMergeSort(arr, left, mid, temp);
            
            resInvCnt += callMergeSort(arr, mid+1, right, temp);
            
            
            resInvCnt += callMerge(arr, left, mid+1, right, temp);
        }
        
        
        return resInvCnt;
    }
    
    
 
 
    long long int inversionCount(long long arr[], long long N)
    {
        long long temp[N];
         
        return callMergeSort(arr, 0, N-1, temp);
    }

};
