Bellman Ford Algo helps to find negative cycles in a graph , as Djikstra is not possible to find -ve cycle

Steps :
1) Relax (N-1) times ( N-1 times is the worst case we can get the result , eg : 1 - 2 - 3 - 4 - 5 , path from 1 to 5 is definitely 4 (N-1))
  ( Note : if we do one more iteration, if distance is reducing, then definitely, there is a negative cycle presents)
2) if(d[u] + wt < d[v])
   d[v] = d[u] + wt;

// Time complexity : O(N-1) * O(E)
// space complexity : O(N)

#include <bits/stdc++.h>
using namespace std;

struct node {
    int u;
    int v;
    int wt; 
    node(int first, int second, int weight) {
        u = first;
        v = second;
        wt = weight;
    }
};


int main() {
	int N,m;
    cin >> N >> m;
    vector<node> edges; 
    for(int i = 0;i<m;i++) {
        int u, v, wt;
        cin >> u >> v >> wt; 
        edges.push_back(node(u, v, wt)); 
    }

    int src;
    cin >> src; 
    
    
    vector<int> dist(N, 10000000);
    
    // src distance = 0
    dist[src] = 0;
    
    // N-1 times run loop
    for(int i=1; i<=N-1; i++)
    {
    	// check for condition
    	for(auto it : edges)
    	{
    		if(dist[it.u] + it.wt < dist[it.v])
    		dist[it.v] = dist[it.u] + it.wt;
    	}
    }
    
    bool negCycle = false;
    
    // if we do one more
	// check for N
    for(auto it : edges)
    {
    	if(dist[it.u] + it.wt < dist[it.v])
    	{
    		negCycle = true;
    		break;
    	}
    }
	
	if(negCycle) cout << "Negative cycle Found";
	else {
		for(int i=0; i<N; i++)
		cout << i << " " << dist[i] << endl;
	}
	
	return 0;
}
