Example 1:
Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.

Example 2:
Input: heights = [2,4]
Output: 4

// two pass solution using next smaller element concept
// time complexity : O(n+ n + n + n) = O(n)
// space complexity : O(3n)

class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        int left[n];
        stack<int> st;
        
        for(int i=0; i<n; i++)
        {
            // next smaller element
            while(!st.empty() && heights[st.top()] >= heights[i]) st.pop();
            
            if(st.empty()) left[i] = 0;
            else left[i] = st.top() + 1;
            
            st.push(i);
        }
        
        while(!st.empty()) st.pop();
        
        int right[n];
        for(int i=n-1; i>=0; i--)
        {
            // next smaller element
            while(!st.empty() && heights[st.top()] >= heights[i]) st.pop();
            
            if(st.empty()) right[i] = n-1;
            else right[i] = st.top() - 1;
            
            st.push(i);
        }
        
        int res = -1;
        for(int i=0; i<n; i++)
        {
            res = max(res, (right[i] - left[i] + 1) * heights[i]);
        }
        
        return res;
    }
};

// one pass

// time complexity : O(n + n) = O(n)
// space complexity : O(n)

class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size() , res = 0;
        stack<int> st;
        
        for(int i=0; i<=n; i++)
        {
            while(!st.empty() && (i == n || heights[st.top()] >= heights[i]))
            {
                // take stack top index 
                int val = heights[st.top()]; st.pop();
                
                int wid;
                // if stack empty then take cur index
                if(st.empty()) wid = i;
                
                // else take difference between cur ind and st.top
                else wid = i - st.top() - 1;
                
                res = max(res , wid * val);
            }
            
            st.push(i);
        }
        
        return res;
    }
};
