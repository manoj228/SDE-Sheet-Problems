1)  Search a 2D Matrix
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 

Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
 
 
i) Brute force solution
we can traverse linearly so it makes time complexity as O(m*n)

ii) Better solution
we can store all the elements into single array , then sort the array and we can easily find mid and return it
//Time complexity : O(log(m*n))
// space complextiy : O(m*n)

iii) Optimal solution
we can use binary search in matrix since matrix is sorted
 // time complexity : O(log(m*n))
// space complexity : O(1)

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size(), n = matrix[0].size();
        
        int left = 0, right = (m * n) - 1;
        
        // O(log(m*n)) - binary search
        while(left <= right)
        {
            int mid = left + (right - left) / 2;
            
            // mid / n gives row , mid % n gives col 
            if(matrix[mid/n][mid%n] == target) return true;
                
            else if(matrix[mid/n][mid%n] > target) right = mid-1;
            
            else
                left = mid+1;
        }
        
        return false;
    }
};
 
 
 
2) Search a 2D Matrix II
Write an efficient algorithm that searches for a target value in an m x n integer matrix. The matrix has the following properties:
Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
 

Example 1:
Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
Output: true

Example 2:
Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20
Output: false

i) Brute force solution
we can traverse linearly so it makes time complexity as O(m*n)

ii) Better solution
we can store all the elements into single array , then sort the array and we can easily find mid and return it
//Time complexity : O(log(m*n))
// space complextiy : O(m*n)

iii) Optimal solution
we can use binary search in matrix since matrix is sorted
 // time complexity : O(m+n)
// space complexity : O(1)
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size(), n = matrix[0].size();
        
        // taking last eleement in first row
        int r = 0, c = n-1;
        
        while(r < m && c >= 0)
        {
            if(matrix[r][c] == target) return true;
            
            else if(matrix[r][c] < target) r++;
            
            else c--;
        }
        
        return false;
    }
};

