The stock span problem is a financial problem where we have a series of n daily price quotes for a stock and we need to calculate span of stock’s price for all n days. 
The span Si of the stock’s price on a given day i is defined as the maximum number of consecutive days just before the given day, 
for which the price of the stock on the current day is less than or equal to its price on the given day. 
For example, if an array of 7 days prices is given as 
{100, 80, 60, 70, 60, 75, 85}, then the span values for corresponding 7 days are 
{1, 1, 1, 2, 1, 4, 6} 

// Time complexity : O(n)
// space complexity : O(n)

#include <bits/stdc++.h>
using namespace std;

void stockSpan(vector<int> nums)
{
	vector<int> stock(nums.size());
	stock[0] = 1;
	
	stack<int> st;
	st.push(0);
	
	int n = nums.size();
	for(int i=1; i<n; i++)
	{
		// pop out all the minimum elements from stack
		while(!st.empty() && nums[i] >= nums[st.top()]) st.pop();
		
		// if stack is empty, then increment 
		// else find cur index
		stock[i] = st.empty() ? i + 1 : i - st.top();
		
		// insert cur index
		st.push(i);
	}
	
	for(auto s : stock)
	cout << s << " ";
}

int main() {
	vector<int> nums{100, 80, 60, 70, 60, 75, 85};
	
	stockSpan(nums);
	
	return 0;
}
