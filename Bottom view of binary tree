Example 1:

Input:
       1
     /   \
    3     2
Output: 3 1 2
Explanation:
First case represents a tree with 3 nodes
and 2 edges where root is 1, left child of
1 is 3 and right child of 1 is 2.

Example 2:

Input:
         10
       /    \
      20    30
     /  \
    40   60
Output: 40 20 60 30


// Time complexity  : O(n)
// space complexity : O(n)
class Solution {
  public:
    void callBottomView(Node *root, int level, int distance, 
                        map<int, pair<int,int>> &mp)
    {
        if(!root) return;
        
        // update root-> data and level for all distance 
        // <= means updating the latest root -> data in map
        if(mp[distance].second <= level)
        {
            mp[distance] = {root->data, level};
        }
        
        // recursion for left subtree
        callBottomView(root->left, level + 1, distance - 1, mp);
        
        // recursion for right subtree
        callBottomView(root->right, level + 1, distance + 1, mp); 
    } 
  
    vector <int> bottomView(Node *root) {
        vector<int> res;
        
        // map to store distance and level
        map<int, pair<int,int>> mp;
        
        // int - distance,
        // pair<int,int> -> {node -> data, level}
        
        callBottomView(root, 0, 0, mp);
        
        for(auto dist : mp)
        {
            res.push_back(dist.second.first);
        }
        
        return res;
    }
};
