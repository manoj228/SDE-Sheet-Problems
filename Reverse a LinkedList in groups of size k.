Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.
k is a positive integer and is less than or equal to the length of the linked list. 
If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.

 
Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Example 2:
Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]

Example 3:
Input: head = [1,2,3,4,5], k = 1
Output: [1,2,3,4,5]

Example 4:
Input: head = [1], k = 1
Output: [1]


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        
        if(!head)
            return head;
        
           //find total count of nodes
        int c = 0;
        ListNode *cur = head;
        while(cur) {
            c++;
            cur = cur -> next;
        }
        
        ListNode *dum = new ListNode();
        dum -> next = head;
        
        ListNode *pre = dum, *next = dum ;
        
        while(c >= k)
        {
            cur = pre -> next;
            next = cur -> next;
            
            for(int i=1; i<k; i++)
            {
                cur -> next = next -> next;
                
                next -> next = pre -> next;
                
                pre -> next = next;
                
                next = cur -> next;
             }
            
            pre = cur;
            c -= k;
        }
     
        
        return dum -> next;
        
    }
};
