Given an integer n, return all the structurally unique BST's (binary search trees), 
which has exactly n nodes of unique values from 1 to n. Return the answer in any order.


Example 1:

Input: n = 3
Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]

Example 2:

Input: n = 1
Output: [[1]]

/*
to build BST from given array,
for every root, there is combination of (curLeft, i-1) left subtree and (i+1, curRight) right subtree
*/

class Solution {
public:
    vector<TreeNode*> generate(int left, int right)
    {
        if(left > right)
            return {NULL};
        else{
            vector<TreeNode *> res;
            
            for(int i=left; i<=right; i++)
            {
                // taking recursion of left subtree
                vector<TreeNode *> leftSubTree = generate(left, i-1);
                
                // recursion of right subtree
                vector<TreeNode *> rightSubTree = generate(i+1, right);
                
                // insert all the combinations
                for(auto leftChild : leftSubTree)
                {
                    for(auto rightChild : rightSubTree)
                    {
                        TreeNode *newNode = new TreeNode(i);
                        newNode -> left = leftChild;
                        newNode -> right = rightChild;
                        
                        res.push_back(newNode);
                    }
                }
            }
            
             return res;
        }
        
       
    }
    
    vector<TreeNode*> generateTrees(int n) {
        
        return generate(1, n);
    }
};
