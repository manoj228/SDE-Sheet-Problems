A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. 
A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the root of a binary tree, return the maximum path sum of any path.


Example 1:

Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.

Example 2:

Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.


// Time complexity : O(n)
// space complexity : O(1)
class Solution {
public:
    int findMaxSum(TreeNode *root, int &res)
    {
        if(!root) return 0;
        
        // recur for left subtree
        int left = findMaxSum(root -> left, res);
        
        // recur for right subtree
        int right = findMaxSum(root -> right, res);
        
        // 4 cases 
        // + , +
        // + , -
        // - , -
        // - , -
        if(left >= 0 && right >= 0)
            res = max(res, root->val + left + right);
        
        else if(left >= 0 && right < 0)
            res = max(res, root->val + left);
        
        else if(left < 0 && right >= 0)
            res = max(res, root->val + right);
        
        else if(left < 0 && right < 0)
            res = max(res, root->val);
        
        // check which one we need to take 
        return max(root->val, max(root->val + left, root->val+right));
        
    } 
    
    int maxPathSum(TreeNode* root) {
        int res = INT_MIN;
        
        findMaxSum(root, res);
        
        return res;
    }
};
