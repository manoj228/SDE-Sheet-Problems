Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets. 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]


class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
    sort(nums.begin(), nums.end());
    vector<vector<int>> res;
        
    for(int i=0; i<nums.size(); i++) 
    {
        // do two pointer
        
        int left = i+1, right = nums.size() - 1;
        
        while(left < right)
        {
            int curSum = nums[left] + nums[i] + nums[right];
            
            if(curSum == 0)
            {
                vector<int> temp;
                
                temp.push_back(nums[left]);
                temp.push_back(nums[i]);
                temp.push_back(nums[right]);
                
                res.push_back(temp);
                
                // skip the duplicates
                while(left < right && nums[left] == temp[0]) ++left;
                
                // skip the duplicates
                while(left < right && nums[left] == temp[2]) --right;  
            }
            
            else if(curSum > 0) --right ;
            else ++left;
        }
        
          while(i+1 < nums.size() && nums[i] == nums[i+1]) ++i;
    }
        
        
    return res;
    }
};
