Examples:  

Input: arr[] = {1, 9, 3, 10, 4, 20, 2}
Output: 4
Explanation: 
The subsequence 1, 3, 4, 2 is the longest 
subsequence of consecutive elements

Input: arr[] = {36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42}
Output: 5
Explanation: 
The subsequence 36, 35, 33, 34, 32 is the longest 
subsequence of consecutive elements.

1) // Brute force solution
// sort the array , traverse the array and count 

// Time complexity : O(n logn)
// space complexity : O(n)

2) // optimal solution is hashing

// Time complexity : O(n) + O(n) = O(n)
// space complexity : O(1)

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {                
        set<int> st;
        for(auto num : nums) st.insert(num);
        
        int longSeq = 0;
        
        // O(n)
        for(auto num : nums)
        {
        // checking num -1 is present or not, because, if it's present, then no to check for sequence
            if(!st.count(num-1))
            {
                int curNum = num, curLen = 1;
                
                while(st.count(curNum+1))
                {
                    curLen += 1;
                    curNum += 1;
                }
                
                longSeq = max(longSeq, curLen);
            }
        }
        
        
        return longSeq;
    }
};
