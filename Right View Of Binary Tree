Example 1:

Input:
       1
    /    \
   3      2
Output: 1 2
Example 2:

Input:
     10
    /   \
  20     30
 /   \
40  60 
Output: 10 30 60

// Time Complexity : O(h)
// Space complexity : O(n)
class Solution
{
    public:
    void callRightView(Node *root, int level, int &maxi, vector<int> &res)
    {
        if(!root) return;
        
        // if level > maxi, then it is the first node
        if(maxi < level)
        {
            maxi = level;
            res.push_back(root->data);
        }
        
        // recursion for right subtree
        callRightView(root->right, level+1, maxi, res);
        
        // recursion for left subtree
        callRightView(root->left, level+1, maxi, res);
    }
    
    
    vector<int> rightView(Node *root)
    {
       vector<int> res;
       
       int maxi = -1;
       
       callRightView(root, 0, maxi, res);
       
       return res;
    }
};
