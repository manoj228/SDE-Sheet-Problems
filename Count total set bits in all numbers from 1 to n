Example 1:

Input: N = 4
Output: 5
Explanation:
For numbers from 1 to 4.
For 1: 0 0 1 = 1 set bits
For 2: 0 1 0 = 1 set bits
For 3: 0 1 1 = 2 set bits
For 4: 1 0 0 = 1 set bits
Therefore, the total set bits is 5.
Example 2:

Input: N = 17
Output: 35
Explanation: From numbers 1 to 17(both inclusive), 
the total number of set bits is 35.


1) Brute Force Solution
// time complexity : O(nlogn)
// space compelxity : O(1)

class Solution{
    public:
    
    int countSet(int n)
    {
        int c = 0;
        
        while(n)
        {
            c++;
            
            n &= (n-1);
        }
        
        return c;
    }
    
    
    int countSetBits(int n)
    {
        int res = 0;
        
        for(int i=1; i<=n; i++)
        res += countSet(i);
        
        
        return res;
    }
};

2) Simple and Efficient solution

If we observe bits from rightmost side at distance i than bits get inverted after 2^i position in vertical sequence. 
for example n = 5; 
0 = 0000 
1 = 0001 
2 = 0010 
3 = 0011 
4 = 0100 
5 = 0101
Observe the right most bit (i = 0) the bits get flipped after (2^0 = 1) 
Observe the 3rd rightmost bit (i = 2) the bits get flipped after (2^2 = 4) 
So, We can count bits in vertical fashion such that at iâ€™th right most position bits will be get flipped after 2^i iteration;

// time complexity : O(k*n) where k is the no of bits to represent n and k <= 64
// space compelxity : O(1)

class Solution{
    public:
    
    
    int countSetBits(int n)
    {
        int res = 0;
        
        // 1 << i = 2^i
        for(int i=0; (1 << i) <= n; i++)
        {
            bool k = 0;
            
            // change is iterator from 2^i to 1
            int change = (1 << i);
            
            // we starts from 0, because then only we can process exactly 
            /*
            pos-8421
            0 = 0000 
            1 = 0001 
            2 = 0010 
            3 = 0011 
            4 = 0100 
            5 = 0101
            
            Here, you can check in vertical fashion, 
            at 1 pos, we are getting 0 and 1 alternatively
            at 2 pos, we are getting 0's and 1's alternatively two times
            at 4 pos, we are getting 0's and 1's alternatively 4 times
            
            */
            for(int j=0; j<=n; j++)
            {
               
                res += k;
                
                // change will be 1, whenever u get 2 ^ i
                if(change == 1)
                {
                    k = !k;
                    
                    change = (1 << i);
                }
                else{
                    
                    change--;
                }
                
            }
            
            cout << endl;
        }
        
        
        
        
        return res;
    }
};

3) Most Optimal solution
// time complexity : O(logn)
// space compelxity : O(1)

class Solution{
    public:
    int getLeftMostBit(int n)
    {
        int c = -1;
        while(n)
        {
            c++;
            n >>= 1;
        }
        
        return c;
    }
    
    int countSetBits(int n)
    { 
        int cnt = 0;
        int x = getLeftMostBit(n);
        
        while(n)
        {
            // (1 << x) meanse 2 * x;
            // x * (1 << x) / 2 - uesd to count the no of set bits for the nearest power of 2
            // After the nearest power of 2, find
            // n - (1 << x) + 1 - used to find the no of set bits of left most bit from right to left
            
            cnt += (x * (1 << x) / 2 ) + (n - (1 << x) + 1);
            
            
            // n & ~(1 << x) used to flip the left most bit from right to left
            // because, we already added the left most set bit count, so we need to flip that
            n = n & ~(1 << x);
            
            
            // here, we are dividing the problem into sub-problems 
            while(n && x > 0)
            {
                if(n & (1 << x)) 
                break;
                
                // reducing the x , because we are calculating the position from right
                x--;
            }
            
        }
        
        return cnt;
    
    }
};

