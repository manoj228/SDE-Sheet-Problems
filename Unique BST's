count of bst = combination of left subtree * combination of right subtree

Example 1:

Input:
N = 2
Output: 2
Explanation:for N = 2, there are 2 unique
BSTs
     1               2  
      \            /
       2         1
Example 2:

Input:
N = 3
Output: 5
Explanation: for N = 3, there are 5
possible BSTs
  1           3     3       2     1
    \        /     /      /  \     \
     3      2     1      1    3     2
    /      /       \                 \
   2      1         2                 3
   
   
   
   /*
Upon observing the pattern of outputs, we can say that answer for any n will be:

ans(n) = ans(0)*ans(n-1) + ans(1)*ans(n-2) + â€¦ + ans(n-1)*ans(0)
*/

// Time Complexity: O(N * N).
// Space Complexity: O(N)

class Solution
{
    public:
    int numTrees(int N) 
    {
        if(N == 1) return 1;
        if(N == 2) return 2;
        
        int MOD = 1e9 + 7;
        
        vector<long> dp(N+1, 0);
        dp[0] = 1, dp[1] = 1;
        
        for(int i=2; i<=N; i++)
        {
            for(int j=0; j<i; j++)
            {
                long leftSubtree = dp[j] ;
                long rightSubtree = dp[i-j-1];
                
                long res = (leftSubtree * rightSubtree) % MOD;
                dp[i] = (dp[i] + res) % MOD;
            }
        }
        
        return (int)dp[N];
    }
};
