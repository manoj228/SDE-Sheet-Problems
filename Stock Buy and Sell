Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

1) // Brute Force solution
// we can take two for loops, for each element , we need to check for maximum differnce and update the ans

// Time complexity : O(n * n)
// Space complexity : O(1)

    int maxProfit(vector<int>& prices) {
     
        int ans = 0;
        
        // O(n * n)
        for(int i=0; i<prices.size(); i++)
        {
            int cur = -1;
            for(int j=i+1; j<prices.size(); j++)
            {
                if(prices[i] <= prices[j])
                    cur = prices[j] - prices[i];
                
                ans = max(cur, ans);
            }
        }
          return ans;
   }
   
   
   
   2) // Optimal solution
// we are taking the first price and compare with the upcoming prices and updating the ans
// so we got max dif for first price , here we need to check whether any value is greater than our ans or not
// Time complexity : O(n)
// Space complexity : O(1)

   class Solution {
public:
    int maxProfit(vector<int>& prices) {

        int ans = 0;
        
        // O (n) 
        for(int i = 0;i<prices.size();i++){
            int left = prices[i];
            while(i<prices.size() && prices[i]>=left){
                ans = max(prices[i]-left,ans);
                i++;

            }
            i--;
         }
              return ans;
    }
};
