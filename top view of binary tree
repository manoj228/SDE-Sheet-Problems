Example 1:

Input:
      1
   /    \
  2      3
Output: 2 1 3
Example 2:

Input:
       10
    /      \
  20        30
 /   \    /    \
40   60  90    100
Output: 40 20 10 30 100


// Time complexity  : O(n)
// space complexity : O(n)

class Solution
{
    public:
    void callTopView(Node *root, int level, int distance, 
                        map<int, pair<int,int>> &mp)
    {
        if(!root) return;
        
        // update root-> data and level for unique distance
        // > means updating the first root -> data in map
        if(mp.find(distance) == mp.end() || mp[distance].second > level)
        {
            mp[distance] = {root->data, level};
        }
        
        // recursion for left subtree
        callTopView(root->left, level + 1, distance - 1, mp);
        
        // recursion for right subtree
        callTopView(root->right, level + 1, distance + 1, mp); 
    } 
    
    vector<int> topView(Node *root)
    {
        vector<int> res;
        
        // map to store distance and level
        map<int, pair<int,int>> mp;
        
        // int - distance,
        // pair<int,int> -> {node -> data, level}
        
        callTopView(root, 0, 0, mp);
        
        for(auto dist : mp)
        {
            res.push_back(dist.second.first);
        }
        
        return res;
    }

};
