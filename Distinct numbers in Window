Example: 

Input: arr[] = {1, 2, 1, 3, 4, 2, 3};
       k = 4
Output: 3 4 4 3

Explanation:
First window is {1, 2, 1, 3}, count of distinct numbers is 3
Second window is {2, 1, 3, 4} count of distinct numbers is 4
Third window is {1, 3, 4, 2} count of distinct numbers is 4
Fourth window is {3, 4, 2, 3} count of distinct numbers is 3

Input: arr[] = {1, 2, 4, 4};
       k = 2
Output: 2 2 1

Explanation:
First window is {1, 2}, count of distinct numbers is 2
First window is {2, 4}, count of distinct numbers is 2
First window is {4, 4}, count of distinct numbers is 1


class Solution{
  public:
    vector <int> countDistinct (int A[], int n, int k)
    {
        unordered_map<int,int> mp;
        vector<int> res;
        
        // first add k size elements
        for(int i=0; i<k; i++)
        mp[A[i]]++;
        
        res.push_back(mp.size());
        
        int cnt = mp.size();
        for(int i=k; i<n; i++)
        {
           // reduce cnt , if i - k th element  == 1
           if(mp[A[i-k]] == 1) cnt--;
           
           mp[A[i-k]]--;
           // increase cnt , if ith element  == 0
           if(mp[A[i]] == 0) cnt++;
           mp[A[i]]++;
            
            res.push_back(cnt);
        }
        
        return res;
    }
};
