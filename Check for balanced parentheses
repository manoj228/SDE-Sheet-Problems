Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
Example 4:

Input: s = "([)]"
Output: false
Example 5:

Input: s = "{[]}"
Output: true

// time complexity : O(n)
// space complexity : O(n)
class Solution {
public:
    bool isValid(string s) {
        stack<char> st;
        
        for(auto ch : s)
        {
            if(ch == '(' || ch == '{' || ch == '[')
                st.push(ch);
            
            // if cur char is close bracket, but stack is empty then return false
            if(st.empty()) return false;
            
            switch(ch) 
            {
                case ')': if(st.top() != '(') return false;
                    st.pop();
                    break;
                    
                case '}':if(st.top() != '{') return false;
                    st.pop();
                    break;
                    
                case ']': if(st.top() != '[') return false;
                    st.pop();
                    break;                                  
            }            
            
        }
        
        
        return (st.empty());
    }
};
