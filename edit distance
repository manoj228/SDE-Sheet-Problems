Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')

// Time complexity : O(m * n)
// Space complexity : O(m * n)

class Solution {
public:
    int findMin(string s1, string s2, int i, int m, int j, int n,
               vector<vector<int>> &dp)
    {
        // if i reached end , then move n - j
        if(i == m) return n - j;
            
        // if j reached end , then move m - i
        if(j == n) return m - i;
        
        if(dp[i][j] != -1) return dp[i][j];
        
        // if both char not matches
        if(s1[i] != s2[j])
        {
            // insert
            int insert = 1 + findMin(s1,s2, i,m, j+1, n, dp);
            
            // remove
            int remove = 1 + findMin(s1,s2, i+1,m, j, n, dp);
            
            // replace
            int replace = 1 + findMin(s1, s2, i+1, m, j+1, n, dp);
            
            return dp[i][j] = min({insert, remove, replace});
        }
        
        // if both char matched
        
        return dp[i][j] = findMin(s1, s2, i+1, m, j+1, n, dp);
    }
    
    int minDistance(string word1, string word2) {
      
        vector<vector<int>> dp(word1.size(), vector<int>(word2.size(), -1));
        return findMin(word1, word2, 0, word1.size(), 0, word2.size(), dp);
    }
};
