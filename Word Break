Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:

Input: s = "leetcode", wordDict = ["leet","code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple","pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: false


// Time complexity : O(N * N)
// space complexity : O(N + N)

class Solution {
public:
   unordered_map<string, bool> memo;
    
    bool wordBreakHelp(string word, unordered_map<string, bool>& dict)
    {
        //if present in dict
        if(dict.find(word) != dict.end())
            return true;
        
        //if present in memo, no need to call 
        if(memo.find(word) != memo.end())
            return memo[word];
        
        
        for(int i=0; i<word.length(); i++)
        {
            string left = word.substr(0, i+1); 
            string right = word.substr(i+1); 
            
            if(dict.find(left) != dict.end())
            {
                bool ros = wordBreakHelp(right, dict); 
                
                if(ros == true)
                {
                    memo[word] = true; //entire word exists
                    return true;
                }
            }
        }
        
        //if no prefix is found to be matching, word does not exist
        memo[word] = false;
        return false;
          
    }
    
    bool wordBreak(string s, vector<string>& wordDict) 
    {
        unordered_map<string, bool> dict;
        
        for(string s : wordDict)
            dict[s] = true;
        
        return wordBreakHelp(s, dict);
    }
    
};
