Examples : 

Input: n = 5
Output: 25

Input: 7
Output: 49

Input: n = 12
Output: 144


1) First Approach 

square(n) = 0 if n == 0
  if n is even 
     square(n) = 4*square(n/2) 
  if n is odd
     square(n) = 4*square(floor(n/2)) + 4*floor(n/2) + 1 

  
Intuition :

If n is even, it can be written as
  n = 2*x 
  n2 = (2*x)2 = 4*x2
If n is odd, it can be written as 
  n = 2*x + 1
  n2 = (2*x + 1)2 = 4*x2 + 4*x + 1
  
  // Time complexity : O(logn)
  // space complexity : O(1)
  
  #include <bits/stdc++.h>
using namespace std;

int square(int n)
{
	if(n == 0) return 0;
	
	// for -ve numbers
	if(n < 0) n *= -n;
	
	// equal n / 2
	int x = n >> 1;
	
	if(n & 1)
	// << 1 = 2 , << 2 - 4
	return (square(x) << 2) + (x << 2) + 1;
	else
	return (square(x) << 2);
	 
}

int main() {
	int n ;
	cin >> n;
	
	cout << square(n) << endl;
	
	return 0;
}


2) Second Approach

For a given number `num` we get square of it by multiplying number as `num * num`. 
Now write one of `num` in square `num * num` in terms of power of `2`. Check below examples.

Eg: num = 10, square(num) = 10 * 10 
                          = 10 * (8 + 2) = (10 * 8) + (10 * 2)
    num = 15, square(num) = 15 * 15 
                          = 15 * (8 + 4 + 2 + 1) = (15 * 8) + (15 * 4) + (15 * 2) + (15 * 1)

Multiplication with power of 2's can be done by left shift bitwise operator.

#include <bits/stdc++.h>
using namespace std;

int square(int n)
{
	if(n < 0) n = -n;
	
	int res = 0, temp = n;
	
	while(temp)
	{
		int noOfTimes = 0, cur = 1;
		
		// check whether pow of 2 is less than temp if then increment twice and noOfshits
		while(temp >= (cur << 1))
		{
			cur = cur << 1;
			noOfTimes++;
		}
		
		res += (n << noOfTimes);
		temp -= cur;
	}
	 
	return res;
}

int main() {
	int n ;
	cin >> n;
	
	cout << square(n) << endl;
	
	return 0;
}

