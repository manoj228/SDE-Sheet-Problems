Example 1:

Input: nums = [1,2,3]
Output: [1,3,2]
Example 2:

Input: nums = [3,2,1]
Output: [1,2,3]
Example 3:

Input: nums = [1,1,5]
Output: [1,5,1

1) // Brute force solution
// we can create all possible solution and compare with given input and return it

// Time complexity : O(n*n)
// Space complexity : O(n)

2) Optimal solution

// 1) traverse start from 0, check for ind1 if arr[i] < arr[i+1]
// 2) traverse from end, check for ind2 if arr[ind1] < arr[i]
// 3) swap(arr[ind1] , arr[ind2])
// 4) reverse(inde1+1, end)

// Time complexity : O(n) 
// space complexity : O(1)

class Solution {
public:
   
    void nextPermutation(vector<int>& nums) {
       
        int n = nums.size(), ind1, indx2;
        
        // O(n)
        for(ind1 = n-2; ind1 >= 0; ind1--)
        {
            if(nums[ind1] < nums[ind1+1])
                break;
        }
        
        if(ind1 < 0)
            // O(n)
            reverse(nums.begin(), nums.end());
        else{
            
            // O(n)
            for(indx2 = n-1; indx2 >= 0; indx2--)
            {
                if(nums[ind1] < nums[indx2]) 
                    break;
            }
            swap(nums[ind1], nums[indx2]);
            
            //O(n)
            reverse(nums.begin() + ind1 + 1, nums.end());
        }
        
    }
};

