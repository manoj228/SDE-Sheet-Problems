Example 1:

Input: nums = [1,2,3]
Output: [1,3,2]
Example 2:

Input: nums = [3,2,1]
Output: [1,2,3]
Example 3:

Input: nums = [1,1,5]
Output: [1,5,1

1) // Brute force solution
// we can create all possible solution and compare with given input and return it

// Time complexity : O(n*n)
// Space complexity : O(n)

2) Optimal solution

// 1) traverse start from 0, check for ind1 if arr[i] < arr[i+1]
// 2) traverse from end, check for ind2 if arr[ind1] < arr[i]
// 3) swap(arr[ind1] , arr[ind2])
// 4) reverse(inde1+1, end)

// Time complexity : O(n) 
// space complexity : O(1)

class Solution {
public:
   
    void nextPermutation(vector<int>& nums) {
       
        int inv = -1, n = nums.size();
        
        for(int i = 0; i < n-1; i++)
        {
            // check the last index of cur ele, which is less than next element
            if(nums[i] < nums[i+1])
                inv = i;
        }
        
        // then we reached last permutation
        if(inv == -1)
        {
            // reverse whole array
            reverse(nums.begin(), nums.end());
        }
        
        else{
            
            for(int i = nums.size()-1; i >= 0; i--)
            {
                // check for element which is greater than inv element
                if(nums[inv] < nums[i])
                {
                    swap(nums[inv], nums[i]);
                    break;
                }
            }
            
            // now reverse
            reverse(nums.begin()+inv+1, nums.end());
            
        }
    }
};

